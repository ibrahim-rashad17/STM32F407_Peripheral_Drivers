
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000cd0  08000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce0  08000ce0  00002004  2**0
                  CONTENTS
  4 .ARM          00000008  08000ce0  08000ce0  00001ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ce8  08000ce8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce8  08000ce8  00001ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cec  08000cec  00001cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cf0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000040  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012eb  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000051e  00000000  00000000  0000331f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d1  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000293d  00000000  00000000  00003a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019ba  00000000  00000000  00006376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a20a  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011f3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e8  00000000  00000000  00011f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000cb8 	.word	0x08000cb8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000cb8 	.word	0x08000cb8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
GPIO_Handle_t GPIOBtn;

char *TxData = "Hello World\r\n";

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0007a11f 	.word	0x0007a11f

08000224 <SPI_IO_Init>:

void SPI_IO_Init()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	spi_gpio.pGPIOx = GPIOB;
 8000228:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <SPI_IO_Init+0x5c>)
 800022a:	4a16      	ldr	r2, [pc, #88]	@ (8000284 <SPI_IO_Init+0x60>)
 800022c:	601a      	str	r2, [r3, #0]
	spi_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	4b14      	ldr	r3, [pc, #80]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000230:	2202      	movs	r2, #2
 8000232:	715a      	strb	r2, [r3, #5]
	spi_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000236:	2200      	movs	r2, #0
 8000238:	721a      	strb	r2, [r3, #8]
	spi_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_MEDIUM;
 800023a:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <SPI_IO_Init+0x5c>)
 800023c:	2201      	movs	r2, #1
 800023e:	719a      	strb	r2, [r3, #6]
	spi_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;	//PB15 - SPI2 MOSI
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000242:	220f      	movs	r2, #15
 8000244:	711a      	strb	r2, [r3, #4]
	spi_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000248:	2205      	movs	r2, #5
 800024a:	725a      	strb	r2, [r3, #9]
	gpio_init(&spi_gpio);
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <SPI_IO_Init+0x5c>)
 800024e:	f000 f9b3 	bl	80005b8 <gpio_init>

	spi_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;	//PB14 - SPI2 MISO
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000254:	220e      	movs	r2, #14
 8000256:	711a      	strb	r2, [r3, #4]
	gpio_init(&spi_gpio);
 8000258:	4809      	ldr	r0, [pc, #36]	@ (8000280 <SPI_IO_Init+0x5c>)
 800025a:	f000 f9ad 	bl	80005b8 <gpio_init>

	spi_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;	//PB13 - SPI2 SCLK
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000260:	220d      	movs	r2, #13
 8000262:	711a      	strb	r2, [r3, #4]
	gpio_init(&spi_gpio);
 8000264:	4806      	ldr	r0, [pc, #24]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000266:	f000 f9a7 	bl	80005b8 <gpio_init>

	spi_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;	//PB12 - SPI2 NSS
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <SPI_IO_Init+0x5c>)
 800026c:	220c      	movs	r2, #12
 800026e:	711a      	strb	r2, [r3, #4]
	spi_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 8000270:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000272:	2200      	movs	r2, #0
 8000274:	721a      	strb	r2, [r3, #8]
	gpio_init(&spi_gpio);
 8000276:	4802      	ldr	r0, [pc, #8]	@ (8000280 <SPI_IO_Init+0x5c>)
 8000278:	f000 f99e 	bl	80005b8 <gpio_init>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000020 	.word	0x20000020
 8000284:	40020400 	.word	0x40020400

08000288 <Btn_Init>:

void Btn_Init()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 800028c:	220c      	movs	r2, #12
 800028e:	2100      	movs	r1, #0
 8000290:	480d      	ldr	r0, [pc, #52]	@ (80002c8 <Btn_Init+0x40>)
 8000292:	f000 fce4 	bl	8000c5e <memset>

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <Btn_Init+0x40>)
 8000298:	4a0c      	ldr	r2, [pc, #48]	@ (80002cc <Btn_Init+0x44>)
 800029a:	601a      	str	r2, [r3, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800029c:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <Btn_Init+0x40>)
 800029e:	2200      	movs	r2, #0
 80002a0:	711a      	strb	r2, [r3, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <Btn_Init+0x40>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	715a      	strb	r2, [r3, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <Btn_Init+0x40>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	719a      	strb	r2, [r3, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 80002ae:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <Btn_Init+0x40>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	721a      	strb	r2, [r3, #8]

	gpio_init(&GPIOBtn);
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <Btn_Init+0x40>)
 80002b6:	f000 f97f 	bl	80005b8 <gpio_init>

	GPIO_IRQConfig(EXTI0, ENABLE);
 80002ba:	2101      	movs	r1, #1
 80002bc:	2006      	movs	r0, #6
 80002be:	f000 fb23 	bl	8000908 <GPIO_IRQConfig>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000038 	.word	0x20000038
 80002cc:	40020000 	.word	0x40020000

080002d0 <main>:

int main()
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	//Initialize SPI GPIOs
	SPI_IO_Init();
 80002d6:	f7ff ffa5 	bl	8000224 <SPI_IO_Init>

	//Enable Button Interrupt
	Btn_Init();
 80002da:	f7ff ffd5 	bl	8000288 <Btn_Init>

	spi2.pSPIx = SPI2;
 80002de:	4b29      	ldr	r3, [pc, #164]	@ (8000384 <main+0xb4>)
 80002e0:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <main+0xb8>)
 80002e2:	601a      	str	r2, [r3, #0]
	spi2.SPI_Config.BusConfig = SPI_BUS_CNFG_FULL_DUPLEX;
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <main+0xb4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	715a      	strb	r2, [r3, #5]
	spi2.SPI_Config.Clk_Speed = SPI_SCLK_SPEED_DIV32;
 80002ea:	4b26      	ldr	r3, [pc, #152]	@ (8000384 <main+0xb4>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	72da      	strb	r2, [r3, #11]
	spi2.SPI_Config.DeviceMode = SPI_DEV_MODE_MASTER;
 80002f0:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <main+0xb4>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	711a      	strb	r2, [r3, #4]
	spi2.SPI_Config.DFF = SPI_DFF_8BIT;
 80002f6:	4b23      	ldr	r3, [pc, #140]	@ (8000384 <main+0xb4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
	spi2.SPI_Config.SSM = SPI_SSM_DISABLE;
 80002fc:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <main+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	725a      	strb	r2, [r3, #9]
	spi2.SPI_Config.CPHA = SPI_CPHA_LOW;
 8000302:	4b20      	ldr	r3, [pc, #128]	@ (8000384 <main+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	721a      	strb	r2, [r3, #8]
	spi2.SPI_Config.CPOL = SPI_CPOL_LOW;
 8000308:	4b1e      	ldr	r3, [pc, #120]	@ (8000384 <main+0xb4>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]

	SPI_Init(&spi2);
 800030e:	481d      	ldr	r0, [pc, #116]	@ (8000384 <main+0xb4>)
 8000310:	f000 fbd4 	bl	8000abc <SPI_Init>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000314:	2101      	movs	r1, #1
 8000316:	481c      	ldr	r0, [pc, #112]	@ (8000388 <main+0xb8>)
 8000318:	f000 fc85 	bl	8000c26 <SPI_SSOEConfig>

	while(1)
	{
		if(gpio_read_inp_pin(GPIOA,GPIO_PIN_NO_0) == BTN_PRESSED)
 800031c:	2100      	movs	r1, #0
 800031e:	481b      	ldr	r0, [pc, #108]	@ (800038c <main+0xbc>)
 8000320:	f000 fada 	bl	80008d8 <gpio_read_inp_pin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b01      	cmp	r3, #1
 8000328:	d1f8      	bne.n	800031c <main+0x4c>
		{
			delay();
 800032a:	f7ff ff65 	bl	80001f8 <delay>

			SPI_PeripheralControl(SPI2, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	4815      	ldr	r0, [pc, #84]	@ (8000388 <main+0xb8>)
 8000332:	f000 fc5c 	bl	8000bee <SPI_PeripheralControl>

			uint8_t datalen = strlen(TxData);
 8000336:	4b16      	ldr	r3, [pc, #88]	@ (8000390 <main+0xc0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff54 	bl	80001e8 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b2db      	uxtb	r3, r3
 8000344:	71fb      	strb	r3, [r7, #7]
			SPI_TransmitData(&spi2, &datalen, 1);
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <main+0xb4>)
 800034e:	f000 fc1a 	bl	8000b86 <SPI_TransmitData>

			SPI_TransmitData(&spi2, (uint8_t*)TxData, strlen(TxData));
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <main+0xc0>)
 8000354:	681c      	ldr	r4, [r3, #0]
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <main+0xc0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff44 	bl	80001e8 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	4621      	mov	r1, r4
 8000366:	4807      	ldr	r0, [pc, #28]	@ (8000384 <main+0xb4>)
 8000368:	f000 fc0d 	bl	8000b86 <SPI_TransmitData>

			while( (SPI2->SR >> SPI_SR_BSY) & 0x01 );
 800036c:	bf00      	nop
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <main+0xb8>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f9      	bne.n	800036e <main+0x9e>

			SPI_PeripheralControl(SPI2, DISABLE);
 800037a:	2100      	movs	r1, #0
 800037c:	4802      	ldr	r0, [pc, #8]	@ (8000388 <main+0xb8>)
 800037e:	f000 fc36 	bl	8000bee <SPI_PeripheralControl>
		if(gpio_read_inp_pin(GPIOA,GPIO_PIN_NO_0) == BTN_PRESSED)
 8000382:	e7cb      	b.n	800031c <main+0x4c>
 8000384:	2000002c 	.word	0x2000002c
 8000388:	40003800 	.word	0x40003800
 800038c:	40020000 	.word	0x40020000
 8000390:	20000000 	.word	0x20000000

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	@ (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 fc55 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff83 	bl	80002d0 <main>

080003ca <LoopForever>:

LoopForever:
    b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d8:	08000cf0 	.word	0x08000cf0
  ldr r2, =_sbss
 80003dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e0:	20000044 	.word	0x20000044

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <GPIO_PeriClk_Control>:
 *      Author: Ibrahim
 */
#include "stm32f407xx_gpio_driver.h"

void GPIO_PeriClk_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d162      	bne.n	80004c0 <GPIO_PeriClk_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a64      	ldr	r2, [pc, #400]	@ (8000590 <GPIO_PeriClk_Control+0x1a8>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClk_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000402:	4b64      	ldr	r3, [pc, #400]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a63      	ldr	r2, [pc, #396]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800040e:	e0b9      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a61      	ldr	r2, [pc, #388]	@ (8000598 <GPIO_PeriClk_Control+0x1b0>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClk_Control+0x3e>
			GPIOB_PCLK_EN();
 8000418:	4b5e      	ldr	r3, [pc, #376]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a5d      	ldr	r2, [pc, #372]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e0ae      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a5c      	ldr	r2, [pc, #368]	@ (800059c <GPIO_PeriClk_Control+0x1b4>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClk_Control+0x54>
			GPIOC_PCLK_EN();
 800042e:	4b59      	ldr	r3, [pc, #356]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a58      	ldr	r2, [pc, #352]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043a:	e0a3      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a58      	ldr	r2, [pc, #352]	@ (80005a0 <GPIO_PeriClk_Control+0x1b8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClk_Control+0x6a>
			GPIOD_PCLK_EN();
 8000444:	4b53      	ldr	r3, [pc, #332]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a52      	ldr	r2, [pc, #328]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	e098      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a53      	ldr	r2, [pc, #332]	@ (80005a4 <GPIO_PeriClk_Control+0x1bc>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClk_Control+0x80>
			GPIOE_PCLK_EN();
 800045a:	4b4e      	ldr	r3, [pc, #312]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a4d      	ldr	r2, [pc, #308]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000460:	f043 0310 	orr.w	r3, r3, #16
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000466:	e08d      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a4f      	ldr	r2, [pc, #316]	@ (80005a8 <GPIO_PeriClk_Control+0x1c0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClk_Control+0x96>
			GPIOF_PCLK_EN();
 8000470:	4b48      	ldr	r3, [pc, #288]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a47      	ldr	r2, [pc, #284]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047c:	e082      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a4a      	ldr	r2, [pc, #296]	@ (80005ac <GPIO_PeriClk_Control+0x1c4>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClk_Control+0xac>
			GPIOG_PCLK_EN();
 8000486:	4b43      	ldr	r3, [pc, #268]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a42      	ldr	r2, [pc, #264]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800048c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000492:	e077      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a46      	ldr	r2, [pc, #280]	@ (80005b0 <GPIO_PeriClk_Control+0x1c8>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClk_Control+0xc2>
			GPIOH_PCLK_EN();
 800049c:	4b3d      	ldr	r3, [pc, #244]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a8:	e06c      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a41      	ldr	r2, [pc, #260]	@ (80005b4 <GPIO_PeriClk_Control+0x1cc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d168      	bne.n	8000584 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_EN();
 80004b2:	4b38      	ldr	r3, [pc, #224]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a37      	ldr	r2, [pc, #220]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004be:	e061      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		if(pGPIOx == GPIOA)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a33      	ldr	r2, [pc, #204]	@ (8000590 <GPIO_PeriClk_Control+0x1a8>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClk_Control+0xee>
			GPIOA_PCLK_DI();
 80004c8:	4b32      	ldr	r3, [pc, #200]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004cc:	4a31      	ldr	r2, [pc, #196]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d4:	e056      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000598 <GPIO_PeriClk_Control+0x1b0>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClk_Control+0x104>
			GPIOB_PCLK_DI();
 80004de:	4b2d      	ldr	r3, [pc, #180]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004e4:	f023 0302 	bic.w	r3, r3, #2
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ea:	e04b      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a2b      	ldr	r2, [pc, #172]	@ (800059c <GPIO_PeriClk_Control+0x1b4>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClk_Control+0x11a>
			GPIOC_PCLK_DI();
 80004f4:	4b27      	ldr	r3, [pc, #156]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f8:	4a26      	ldr	r2, [pc, #152]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 80004fa:	f023 0304 	bic.w	r3, r3, #4
 80004fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000500:	e040      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a26      	ldr	r2, [pc, #152]	@ (80005a0 <GPIO_PeriClk_Control+0x1b8>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClk_Control+0x130>
			GPIOD_PCLK_DI();
 800050a:	4b22      	ldr	r3, [pc, #136]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a21      	ldr	r2, [pc, #132]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000510:	f023 0308 	bic.w	r3, r3, #8
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000516:	e035      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <GPIO_PeriClk_Control+0x1bc>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClk_Control+0x146>
			GPIOE_PCLK_DI();
 8000520:	4b1c      	ldr	r3, [pc, #112]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000524:	4a1b      	ldr	r2, [pc, #108]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000526:	f023 0310 	bic.w	r3, r3, #16
 800052a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800052c:	e02a      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1d      	ldr	r2, [pc, #116]	@ (80005a8 <GPIO_PeriClk_Control+0x1c0>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClk_Control+0x15c>
			GPIOF_PCLK_DI();
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800053c:	f023 0320 	bic.w	r3, r3, #32
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000542:	e01f      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <GPIO_PeriClk_Control+0x1c4>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClk_Control+0x172>
			GPIOG_PCLK_DI();
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000550:	4a10      	ldr	r2, [pc, #64]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000556:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000558:	e014      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <GPIO_PeriClk_Control+0x1c8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClk_Control+0x188>
			GPIOH_PCLK_DI();
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a0b      	ldr	r2, [pc, #44]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 8000568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800056e:	e009      	b.n	8000584 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <GPIO_PeriClk_Control+0x1cc>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d105      	bne.n	8000584 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_DI();
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <GPIO_PeriClk_Control+0x1ac>)
 800057e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40020000 	.word	0x40020000
 8000594:	40023800 	.word	0x40023800
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40021400 	.word	0x40021400
 80005ac:	40021800 	.word	0x40021800
 80005b0:	40021c00 	.word	0x40021c00
 80005b4:	40022000 	.word	0x40022000

080005b8 <gpio_init>:

void gpio_init(GPIO_Handle_t *pGPIO_Handle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint8_t mode;

	//Enable peripheral clock
	GPIO_PeriClk_Control(pGPIO_Handle->pGPIOx, ENABLE);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff0e 	bl	80003e8 <GPIO_PeriClk_Control>

	//1. Configuring mode
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	617b      	str	r3, [r7, #20]
	mode=temp;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	74fb      	strb	r3, [r7, #19]

	//Clear the MODER bits (Bits cleared = input mode)
	pGPIO_Handle->pGPIOx->MODER &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2103      	movs	r1, #3
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]

	if(mode <= GPIO_MODE_ANALOG)
 80005f4:	7cfb      	ldrb	r3, [r7, #19]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	f200 80a0 	bhi.w	800073c <gpio_init+0x184>
	{
		pGPIO_Handle->pGPIOx->MODER |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6819      	ldr	r1, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	409a      	lsls	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
		if(mode == GPIO_MODE_OUT)
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d13b      	bne.n	8000692 <gpio_init+0xda>
		{
			//Configure output type and speed (First doing speed)
			temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	617b      	str	r3, [r7, #20]
			pGPIO_Handle->pGPIOx->OSPEEDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	609a      	str	r2, [r3, #8]
			pGPIO_Handle->pGPIOx->OSPEEDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6899      	ldr	r1, [r3, #8]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	409a      	lsls	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	430a      	orrs	r2, r1
 8000654:	609a      	str	r2, [r3, #8]

			//Configuring op type
			temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	79db      	ldrb	r3, [r3, #7]
 800065a:	617b      	str	r3, [r7, #20]
			pGPIO_Handle->pGPIOx->OTYPER &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	2301      	movs	r3, #1
 800066a:	408b      	lsls	r3, r1
 800066c:	43db      	mvns	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	400a      	ands	r2, r1
 8000676:	605a      	str	r2, [r3, #4]
			pGPIO_Handle->pGPIOx->OTYPER |= (temp << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	461a      	mov	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa03 f202 	lsl.w	r2, r3, r2
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	430a      	orrs	r2, r1
 8000690:	605a      	str	r2, [r3, #4]
		}

		//Configuring PUPD
		temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7a1b      	ldrb	r3, [r3, #8]
 8000696:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->PUPDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68da      	ldr	r2, [r3, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	400a      	ands	r2, r1
 80006b4:	60da      	str	r2, [r3, #12]
		pGPIO_Handle->pGPIOx->PUPDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	68d9      	ldr	r1, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	409a      	lsls	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]

		if(mode == GPIO_MODE_ALTFN)
 80006ce:	7cfb      	ldrb	r3, [r7, #19]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	f040 80eb 	bne.w	80008ac <gpio_init+0x2f4>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	73fb      	strb	r3, [r7, #15]
			temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	73bb      	strb	r3, [r7, #14]
			pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	3208      	adds	r2, #8
 80006f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	220f      	movs	r2, #15
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	4001      	ands	r1, r0
 800070a:	3208      	adds	r2, #8
 800070c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	3208      	adds	r2, #8
 8000718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7a5b      	ldrb	r3, [r3, #9]
 8000720:	461a      	mov	r2, r3
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7bfa      	ldrb	r2, [r7, #15]
 8000732:	4301      	orrs	r1, r0
 8000734:	3208      	adds	r2, #8
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//3. Enable the IRQ by unmasking it in EXTI reg
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
	}

}
 800073a:	e0b7      	b.n	80008ac <gpio_init+0x2f4>
		SYSCFG_PCLK_EN();
 800073c:	4b5d      	ldr	r3, [pc, #372]	@ (80008b4 <gpio_init+0x2fc>)
 800073e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000740:	4a5c      	ldr	r2, [pc, #368]	@ (80008b4 <gpio_init+0x2fc>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6453      	str	r3, [r2, #68]	@ 0x44
		if(mode == GPIO_MODE_IT_RT)
 8000748:	7cfb      	ldrb	r3, [r7, #19]
 800074a:	2b05      	cmp	r3, #5
 800074c:	d117      	bne.n	800077e <gpio_init+0x1c6>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b5a      	ldr	r3, [pc, #360]	@ (80008b8 <gpio_init+0x300>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	4611      	mov	r1, r2
 800075e:	4a56      	ldr	r2, [pc, #344]	@ (80008b8 <gpio_init+0x300>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000764:	4b54      	ldr	r3, [pc, #336]	@ (80008b8 <gpio_init+0x300>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a50      	ldr	r2, [pc, #320]	@ (80008b8 <gpio_init+0x300>)
 8000778:	400b      	ands	r3, r1
 800077a:	60d3      	str	r3, [r2, #12]
 800077c:	e033      	b.n	80007e6 <gpio_init+0x22e>
		else if(mode == GPIO_MODE_IT_FT)
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	2b04      	cmp	r3, #4
 8000782:	d117      	bne.n	80007b4 <gpio_init+0x1fc>
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000784:	4b4c      	ldr	r3, [pc, #304]	@ (80008b8 <gpio_init+0x300>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	7912      	ldrb	r2, [r2, #4]
 800078c:	4611      	mov	r1, r2
 800078e:	2201      	movs	r2, #1
 8000790:	408a      	lsls	r2, r1
 8000792:	4611      	mov	r1, r2
 8000794:	4a48      	ldr	r2, [pc, #288]	@ (80008b8 <gpio_init+0x300>)
 8000796:	430b      	orrs	r3, r1
 8000798:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <gpio_init+0x300>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7912      	ldrb	r2, [r2, #4]
 80007a2:	4611      	mov	r1, r2
 80007a4:	2201      	movs	r2, #1
 80007a6:	408a      	lsls	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a42      	ldr	r2, [pc, #264]	@ (80008b8 <gpio_init+0x300>)
 80007ae:	400b      	ands	r3, r1
 80007b0:	6093      	str	r3, [r2, #8]
 80007b2:	e018      	b.n	80007e6 <gpio_init+0x22e>
		else if(mode == GPIO_MODE_IT_RFT)
 80007b4:	7cfb      	ldrb	r3, [r7, #19]
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d115      	bne.n	80007e6 <gpio_init+0x22e>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	4b3f      	ldr	r3, [pc, #252]	@ (80008b8 <gpio_init+0x300>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7912      	ldrb	r2, [r2, #4]
 80007c2:	4611      	mov	r1, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	408a      	lsls	r2, r1
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a3b      	ldr	r2, [pc, #236]	@ (80008b8 <gpio_init+0x300>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80007d0:	4b39      	ldr	r3, [pc, #228]	@ (80008b8 <gpio_init+0x300>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	4a35      	ldr	r2, [pc, #212]	@ (80008b8 <gpio_init+0x300>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	60d3      	str	r3, [r2, #12]
		ofst = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4) ;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	74bb      	strb	r3, [r7, #18]
		temp1 = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4) ;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	747b      	strb	r3, [r7, #17]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a2f      	ldr	r2, [pc, #188]	@ (80008bc <gpio_init+0x304>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d024      	beq.n	800084c <gpio_init+0x294>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2e      	ldr	r2, [pc, #184]	@ (80008c0 <gpio_init+0x308>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d01d      	beq.n	8000848 <gpio_init+0x290>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <gpio_init+0x30c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d016      	beq.n	8000844 <gpio_init+0x28c>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <gpio_init+0x310>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d00f      	beq.n	8000840 <gpio_init+0x288>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a29      	ldr	r2, [pc, #164]	@ (80008cc <gpio_init+0x314>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d008      	beq.n	800083c <gpio_init+0x284>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a28      	ldr	r2, [pc, #160]	@ (80008d0 <gpio_init+0x318>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d101      	bne.n	8000838 <gpio_init+0x280>
 8000834:	2305      	movs	r3, #5
 8000836:	e00a      	b.n	800084e <gpio_init+0x296>
 8000838:	23ff      	movs	r3, #255	@ 0xff
 800083a:	e008      	b.n	800084e <gpio_init+0x296>
 800083c:	2304      	movs	r3, #4
 800083e:	e006      	b.n	800084e <gpio_init+0x296>
 8000840:	2303      	movs	r3, #3
 8000842:	e004      	b.n	800084e <gpio_init+0x296>
 8000844:	2302      	movs	r3, #2
 8000846:	e002      	b.n	800084e <gpio_init+0x296>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <gpio_init+0x296>
 800084c:	2300      	movs	r3, #0
 800084e:	743b      	strb	r3, [r7, #16]
		SYSCFG->EXTICR[ofst] &= ~(0xF << (4*temp1));
 8000850:	4a20      	ldr	r2, [pc, #128]	@ (80008d4 <gpio_init+0x31c>)
 8000852:	7cbb      	ldrb	r3, [r7, #18]
 8000854:	3302      	adds	r3, #2
 8000856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085a:	7c7b      	ldrb	r3, [r7, #17]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	210f      	movs	r1, #15
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	491a      	ldr	r1, [pc, #104]	@ (80008d4 <gpio_init+0x31c>)
 800086a:	7cbb      	ldrb	r3, [r7, #18]
 800086c:	4002      	ands	r2, r0
 800086e:	3302      	adds	r3, #2
 8000870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[ofst] |= (portcode << (4*temp1));
 8000874:	4a17      	ldr	r2, [pc, #92]	@ (80008d4 <gpio_init+0x31c>)
 8000876:	7cbb      	ldrb	r3, [r7, #18]
 8000878:	3302      	adds	r3, #2
 800087a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087e:	7c39      	ldrb	r1, [r7, #16]
 8000880:	7c7b      	ldrb	r3, [r7, #17]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4618      	mov	r0, r3
 800088a:	4912      	ldr	r1, [pc, #72]	@ (80008d4 <gpio_init+0x31c>)
 800088c:	7cbb      	ldrb	r3, [r7, #18]
 800088e:	4302      	orrs	r2, r0
 8000890:	3302      	adds	r3, #2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <gpio_init+0x300>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	7912      	ldrb	r2, [r2, #4]
 800089e:	4611      	mov	r1, r2
 80008a0:	2201      	movs	r2, #1
 80008a2:	408a      	lsls	r2, r1
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <gpio_init+0x300>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40013c00 	.word	0x40013c00
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020c00 	.word	0x40020c00
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40021400 	.word	0x40021400
 80008d4:	40013800 	.word	0x40013800

080008d8 <gpio_read_inp_pin>:

	return port_val;
}

uint8_t gpio_read_inp_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
	uint16_t pin_val = ((pGPIOx->IDR & 0xFFFF) >> PinNum) & 0x01;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	81fb      	strh	r3, [r7, #14]

	return pin_val;
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	b2db      	uxtb	r3, r3
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <GPIO_IRQConfig>:
{
	pGPIOx->ODR ^= (1 << PinNum);
}

void GPIO_IRQConfig(IRQ_Number_t IRQNumber, uint8_t En_or_Di)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if(En_or_Di == ENABLE)
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d126      	bne.n	800096c <GPIO_IRQConfig+0x64>
	{
		if(IRQNumber < 32)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b1f      	cmp	r3, #31
 8000922:	d809      	bhi.n	8000938 <GPIO_IRQConfig+0x30>
		{
			temp = IRQNumber % 32;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER0) = (1 << temp);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2201      	movs	r2, #1
 8000930:	409a      	lsls	r2, r3
 8000932:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <GPIO_IRQConfig+0xbc>)
 8000934:	601a      	str	r2, [r3, #0]
		{
			temp = IRQNumber % 32;
			*(NVIC_ICER2) = (1 << temp);
		}
	}
}
 8000936:	e03f      	b.n	80009b8 <GPIO_IRQConfig+0xb0>
		else if(IRQNumber < 64)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b3f      	cmp	r3, #63	@ 0x3f
 800093c:	d809      	bhi.n	8000952 <GPIO_IRQConfig+0x4a>
			temp = IRQNumber % 32;
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER1) = (1 << temp);
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2201      	movs	r2, #1
 800094a:	409a      	lsls	r2, r3
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <GPIO_IRQConfig+0xc0>)
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	e032      	b.n	80009b8 <GPIO_IRQConfig+0xb0>
		else if(IRQNumber < 96)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b5f      	cmp	r3, #95	@ 0x5f
 8000956:	d82f      	bhi.n	80009b8 <GPIO_IRQConfig+0xb0>
			temp = IRQNumber % 32;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 031f 	and.w	r3, r3, #31
 800095e:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER2) = (1 << temp);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2201      	movs	r2, #1
 8000964:	409a      	lsls	r2, r3
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <GPIO_IRQConfig+0xc4>)
 8000968:	601a      	str	r2, [r3, #0]
}
 800096a:	e025      	b.n	80009b8 <GPIO_IRQConfig+0xb0>
		if(IRQNumber < 32)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b1f      	cmp	r3, #31
 8000970:	d809      	bhi.n	8000986 <GPIO_IRQConfig+0x7e>
			temp = IRQNumber % 32;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 031f 	and.w	r3, r3, #31
 8000978:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER0) = (1 << temp);
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2201      	movs	r2, #1
 800097e:	409a      	lsls	r2, r3
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <GPIO_IRQConfig+0xc8>)
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	e018      	b.n	80009b8 <GPIO_IRQConfig+0xb0>
		else if(IRQNumber < 64)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b3f      	cmp	r3, #63	@ 0x3f
 800098a:	d809      	bhi.n	80009a0 <GPIO_IRQConfig+0x98>
			temp = IRQNumber % 32;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 031f 	and.w	r3, r3, #31
 8000992:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER1) = (1 << temp);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	2201      	movs	r2, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <GPIO_IRQConfig+0xcc>)
 800099c:	601a      	str	r2, [r3, #0]
}
 800099e:	e00b      	b.n	80009b8 <GPIO_IRQConfig+0xb0>
		else if(IRQNumber < 96)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b5f      	cmp	r3, #95	@ 0x5f
 80009a4:	d808      	bhi.n	80009b8 <GPIO_IRQConfig+0xb0>
			temp = IRQNumber % 32;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER2) = (1 << temp);
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2201      	movs	r2, #1
 80009b2:	409a      	lsls	r2, r3
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <GPIO_IRQConfig+0xd0>)
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000e104 	.word	0xe000e104
 80009cc:	e000e108 	.word	0xe000e108
 80009d0:	e000e180 	.word	0xe000e180
 80009d4:	e000e184 	.word	0xe000e184
 80009d8:	e000e188 	.word	0xe000e188

080009dc <Get_SPI_FlagStatus>:
 */

#include "stm32f407xx_spi_driver.h"

static uint8_t Get_SPI_FlagStatus(SPI_RegDef_t *pSPIx, uint8_t FLAG)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	if( (pSPIx->SR) & (1 << FLAG) )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	78fa      	ldrb	r2, [r7, #3]
 80009ee:	2101      	movs	r1, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	4013      	ands	r3, r2
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <Get_SPI_FlagStatus+0x22>
	{
		return HIGH;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <Get_SPI_FlagStatus+0x24>
	}
	else
	{
		return LOW;
 80009fe:	2300      	movs	r3, #0
	}
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d120      	bne.n	8000a60 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <SPI_PeriClockControl+0xa0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d106      	bne.n	8000a34 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000a26:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 8000a32:	e035      	b.n	8000aa0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <SPI_PeriClockControl+0xa8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d106      	bne.n	8000a4a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a46:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a48:	e02a      	b.n	8000aa0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <SPI_PeriClockControl+0xac>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d126      	bne.n	8000aa0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a5e:	e01f      	b.n	8000aa0 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <SPI_PeriClockControl+0xa0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6c:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a72:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a74:	e014      	b.n	8000aa0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <SPI_PeriClockControl+0xa8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a8a:	e009      	b.n	8000aa0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <SPI_PeriClockControl+0xac>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d105      	bne.n	8000aa0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SPI_PeriClockControl+0xa4>)
 8000a9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40003800 	.word	0x40003800
 8000ab8:	40003c00 	.word	0x40003c00

08000abc <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPI_Handle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

	//Turn on the peripheral clock
	SPI_PeriClockControl(pSPI_Handle->pSPIx, ENABLE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff9c 	bl	8000a0c <SPI_PeriClockControl>

	//Configure the SPI device mode
	tempreg |= ((pSPI_Handle->SPI_Config.DeviceMode & 0x01) << SPI_CR1_MSTR);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

	//Configure bus mode (If full duplex then no need to change anything)
	if(pSPI_Handle->SPI_Config.BusConfig == SPI_BUS_CNFG_HALF_DUPLEX)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	795b      	ldrb	r3, [r3, #5]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d104      	bne.n	8000af6 <SPI_Init+0x3a>
	{
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e010      	b.n	8000b18 <SPI_Init+0x5c>
	}
	else if (pSPI_Handle->SPI_Config.BusConfig == SPI_BUS_CNFG_SIMPLEX_RX_ONLY)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d108      	bne.n	8000b10 <SPI_Init+0x54>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b04:	60fb      	str	r3, [r7, #12]

		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e003      	b.n	8000b18 <SPI_Init+0x5c>
	}
	else	//Full duplex
	{
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b16:	60fb      	str	r3, [r7, #12]
	}

	//Configure CPOL and CPHA
	tempreg |= ((pSPI_Handle->SPI_Config.CPOL & 0x01) << SPI_CR1_CPOL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	79db      	ldrb	r3, [r3, #7]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
	tempreg |= ((pSPI_Handle->SPI_Config.CPHA & 0x01) << SPI_CR1_CPHA);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7a1b      	ldrb	r3, [r3, #8]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]

	//Configure the data frame format (8 bits by default)
	tempreg |= ((pSPI_Handle->SPI_Config.DFF & 0x01) << SPI_CR1_DFF);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	799b      	ldrb	r3, [r3, #6]
 8000b3a:	02db      	lsls	r3, r3, #11
 8000b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]

	//Clock speed
	tempreg |= ((pSPI_Handle->SPI_Config.Clk_Speed & 0x07) << SPI_CR1_BR);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7adb      	ldrb	r3, [r3, #11]
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]

	//Software slave management
	if(pSPI_Handle->SPI_Config.SSM == SPI_SSM_ENABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7a5b      	ldrb	r3, [r3, #9]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d10b      	bne.n	8000b76 <SPI_Init+0xba>
	{
		tempreg |= (SPI_SSM_ENABLE << SPI_CR1_SSM);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b64:	60fb      	str	r3, [r7, #12]
		tempreg |= ((pSPI_Handle->SPI_Config.SSI & 0x1) << SPI_CR1_SSI);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a9b      	ldrb	r3, [r3, #10]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
	}

	//Write the changes to peripheral control register
	pSPI_Handle->pSPIx->CR1 = tempreg;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	601a      	str	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <SPI_TransmitData>:
 *
 * @Note              -	This is a blocking API

 */
void SPI_TransmitData(SPI_Handle_t *pSPI_Handle, uint8_t *pTxBfr, uint32_t len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	for(uint32_t i=0;i<len;i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e021      	b.n	8000bdc <SPI_TransmitData+0x56>
	{
		while(!(Get_SPI_FlagStatus(pSPI_Handle->pSPIx, SPI_FLAG_TXE)));
 8000b98:	bf00      	nop
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff1b 	bl	80009dc <Get_SPI_FlagStatus>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <SPI_TransmitData+0x14>

		if(pSPI_Handle->SPI_Config.DFF == SPI_DFF_8BIT)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	799b      	ldrb	r3, [r3, #6]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <SPI_TransmitData+0x40>
		{
			pSPI_Handle->pSPIx->DR = *pTxBfr;
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60da      	str	r2, [r3, #12]
			pTxBfr++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e007      	b.n	8000bd6 <SPI_TransmitData+0x50>
		}
		else
		{
			//16 bit format
			pSPI_Handle->pSPIx->DR = *(uint16_t*)pTxBfr;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBfr++;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0;i<len;i++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3d9      	bcc.n	8000b98 <SPI_TransmitData+0x12>
		}
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <SPI_PeripheralControl>:
 *
 * @Note              -	Always call this API to enable SPI before communication and again call this
 * 						API to disable SPI after communication
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d106      	bne.n	8000c0e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c0c:	e005      	b.n	8000c1a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SPI_SSOEConfig>:
 * 						determines the NSS pin value.
 * 						SPE = 1 --> NSS = 0
 * 						SPE = 0 --> NSS = 1
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d106      	bne.n	8000c46 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f043 0204 	orr.w	r2, r3, #4
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000c44:	e005      	b.n	8000c52 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f023 0204 	bic.w	r2, r3, #4
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	605a      	str	r2, [r3, #4]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <memset>:
 8000c5e:	4402      	add	r2, r0
 8000c60:	4603      	mov	r3, r0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d100      	bne.n	8000c68 <memset+0xa>
 8000c66:	4770      	bx	lr
 8000c68:	f803 1b01 	strb.w	r1, [r3], #1
 8000c6c:	e7f9      	b.n	8000c62 <memset+0x4>
	...

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4d0d      	ldr	r5, [pc, #52]	@ (8000ca8 <__libc_init_array+0x38>)
 8000c74:	4c0d      	ldr	r4, [pc, #52]	@ (8000cac <__libc_init_array+0x3c>)
 8000c76:	1b64      	subs	r4, r4, r5
 8000c78:	10a4      	asrs	r4, r4, #2
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb0 <__libc_init_array+0x40>)
 8000c82:	4c0c      	ldr	r4, [pc, #48]	@ (8000cb4 <__libc_init_array+0x44>)
 8000c84:	f000 f818 	bl	8000cb8 <_init>
 8000c88:	1b64      	subs	r4, r4, r5
 8000c8a:	10a4      	asrs	r4, r4, #2
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000ce8 	.word	0x08000ce8
 8000cac:	08000ce8 	.word	0x08000ce8
 8000cb0:	08000ce8 	.word	0x08000ce8
 8000cb4:	08000cec 	.word	0x08000cec

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
