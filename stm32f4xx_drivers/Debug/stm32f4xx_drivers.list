
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002284  08002284  00003284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  080022ec  080022ec  000032ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f4  080022f4  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000032f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f8  080022f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080022fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          000001a0  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002338  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009b3  00000000  00000000  000063e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00006d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a1  00000000  00000000  00006fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036a2  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030d1  00000000  00000000  0000a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bdb8  00000000  00000000  0000d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000196ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fc8  00000000  00000000  000196f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0001a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800226c 	.word	0x0800226c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800226c 	.word	0x0800226c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e00a      	b.n	80002c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002b2:	f3af 8000 	nop.w
 80002b6:	4601      	mov	r1, r0
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	60ba      	str	r2, [r7, #8]
 80002be:	b2ca      	uxtb	r2, r1
 80002c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	3301      	adds	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	697a      	ldr	r2, [r7, #20]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbf0      	blt.n	80002b2 <_read+0x12>
	}

return len;
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00a      	b.n	8000304 <_write+0x28>
	{
//		__io_putchar(*ptr++);
		USART_SendData(&USART_Handle, (uint8_t*)(ptr + DataIdx), 1);
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	4413      	add	r3, r2
 80002f4:	2201      	movs	r2, #1
 80002f6:	4619      	mov	r1, r3
 80002f8:	4807      	ldr	r0, [pc, #28]	@ (8000318 <_write+0x3c>)
 80002fa:	f000 fe1d 	bl	8000f38 <USART_SendData>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	dbf0      	blt.n	80002ee <_write+0x12>
	}
	return len;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200000a8 	.word	0x200000a8

0800031c <_close>:

int _close(int file)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	return -1;
 8000324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000344:	605a      	str	r2, [r3, #4]
	return 0;
 8000346:	2300      	movs	r3, #0
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <_isatty>:

int _isatty(int file)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	return 1;
 800035c:	2301      	movs	r3, #1
}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800036a:	b480      	push	{r7}
 800036c:	b085      	sub	sp, #20
 800036e:	af00      	add	r7, sp, #0
 8000370:	60f8      	str	r0, [r7, #12]
 8000372:	60b9      	str	r1, [r7, #8]
 8000374:	607a      	str	r2, [r7, #4]
	return 0;
 8000376:	2300      	movs	r3, #0
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <_sbrk+0x5c>)
 800038e:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <_sbrk+0x60>)
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000398:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <_sbrk+0x64>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d102      	bne.n	80003a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <_sbrk+0x64>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	@ (80003ec <_sbrk+0x68>)
 80003a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a6:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <_sbrk+0x64>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	693a      	ldr	r2, [r7, #16]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d207      	bcs.n	80003c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b4:	f001 fa24 	bl	8001800 <__errno>
 80003b8:	4603      	mov	r3, r0
 80003ba:	220c      	movs	r2, #12
 80003bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	e009      	b.n	80003d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <_sbrk+0x64>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <_sbrk+0x64>)
 80003d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20020000 	.word	0x20020000
 80003e4:	00000400 	.word	0x00000400
 80003e8:	20000098 	.word	0x20000098
 80003ec:	20000220 	.word	0x20000220

080003f0 <main>:
uint8_t rxbuffer[128];

uint8_t rcvd_data;

int main()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
	memset(&USART_GPIO_Handle, 0, sizeof(USART_GPIO_Handle));
 80003f6:	220c      	movs	r2, #12
 80003f8:	2100      	movs	r1, #0
 80003fa:	4832      	ldr	r0, [pc, #200]	@ (80004c4 <main+0xd4>)
 80003fc:	f001 f9b2 	bl	8001764 <memset>
	memset(&USART_Handle, 0, sizeof(USART_Handle));
 8000400:	2224      	movs	r2, #36	@ 0x24
 8000402:	2100      	movs	r1, #0
 8000404:	4830      	ldr	r0, [pc, #192]	@ (80004c8 <main+0xd8>)
 8000406:	f001 f9ad 	bl	8001764 <memset>

	int a,b,c;

	a = 10;
 800040a:	230a      	movs	r3, #10
 800040c:	60fb      	str	r3, [r7, #12]
	b = 20;
 800040e:	2314      	movs	r3, #20
 8000410:	60bb      	str	r3, [r7, #8]
	c = a+b;
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	4413      	add	r3, r2
 8000418:	607b      	str	r3, [r7, #4]
	//TX Pin - PA2
	USART_GPIO_Handle.pGPIOx = GPIOA;
 800041a:	4b2a      	ldr	r3, [pc, #168]	@ (80004c4 <main+0xd4>)
 800041c:	4a2b      	ldr	r2, [pc, #172]	@ (80004cc <main+0xdc>)
 800041e:	601a      	str	r2, [r3, #0]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000420:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <main+0xd4>)
 8000422:	2202      	movs	r2, #2
 8000424:	711a      	strb	r2, [r3, #4]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HIGH;
 8000426:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <main+0xd4>)
 8000428:	2203      	movs	r2, #3
 800042a:	719a      	strb	r2, [r3, #6]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800042c:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <main+0xd4>)
 800042e:	2200      	movs	r2, #0
 8000430:	71da      	strb	r2, [r3, #7]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000432:	4b24      	ldr	r3, [pc, #144]	@ (80004c4 <main+0xd4>)
 8000434:	2202      	movs	r2, #2
 8000436:	715a      	strb	r2, [r3, #5]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000438:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <main+0xd4>)
 800043a:	2207      	movs	r2, #7
 800043c:	725a      	strb	r2, [r3, #9]

	gpio_init(&USART_GPIO_Handle);
 800043e:	4821      	ldr	r0, [pc, #132]	@ (80004c4 <main+0xd4>)
 8000440:	f000 f984 	bl	800074c <gpio_init>
	//RX Pin - PA3
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <main+0xd4>)
 8000446:	2203      	movs	r2, #3
 8000448:	711a      	strb	r2, [r3, #4]
	USART_GPIO_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800044a:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <main+0xd4>)
 800044c:	2201      	movs	r2, #1
 800044e:	71da      	strb	r2, [r3, #7]
	gpio_init(&USART_GPIO_Handle);
 8000450:	481c      	ldr	r0, [pc, #112]	@ (80004c4 <main+0xd4>)
 8000452:	f000 f97b 	bl	800074c <gpio_init>

	USART_Handle.pUSARTx = USART2;
 8000456:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <main+0xd8>)
 8000458:	4a1d      	ldr	r2, [pc, #116]	@ (80004d0 <main+0xe0>)
 800045a:	60da      	str	r2, [r3, #12]
	USART_Handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 800045c:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <main+0xd8>)
 800045e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000462:	609a      	str	r2, [r3, #8]
	USART_Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <main+0xd8>)
 8000466:	2200      	movs	r2, #0
 8000468:	709a      	strb	r2, [r3, #2]
	USART_Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <main+0xd8>)
 800046c:	2202      	movs	r2, #2
 800046e:	701a      	strb	r2, [r3, #0]
	USART_Handle.USART_Config.USART_StopBits = USART_STOPBITS_1;
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <main+0xd8>)
 8000472:	2200      	movs	r2, #0
 8000474:	711a      	strb	r2, [r3, #4]
	USART_Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000476:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <main+0xd8>)
 8000478:	2200      	movs	r2, #0
 800047a:	70da      	strb	r2, [r3, #3]
	USART_Handle.USART_Config.USART_Parity = USART_PARITY_DISABLE;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <main+0xd8>)
 800047e:	2200      	movs	r2, #0
 8000480:	705a      	strb	r2, [r3, #1]


	USART_Init(&USART_Handle);
 8000482:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <main+0xd8>)
 8000484:	f000 fc5f 	bl	8000d46 <USART_Init>

	//Enable the interrupt
	USART_IRQConfig(USART2_IT, ENABLE);
 8000488:	2101      	movs	r1, #1
 800048a:	2026      	movs	r0, #38	@ 0x26
 800048c:	f000 fef6 	bl	800127c <USART_IRQConfig>

	//Enable IT reception
	USART_ReceiveDataIT(&USART_Handle, &rcvd_data, NO_SPECIFIED_LENGTH);
 8000490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000494:	490f      	ldr	r1, [pc, #60]	@ (80004d4 <main+0xe4>)
 8000496:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <main+0xd8>)
 8000498:	f000 fda1 	bl	8000fde <USART_ReceiveDataIT>

	USART_SendData(&USART_Handle, msg, strlen((char*)msg));
 800049c:	480e      	ldr	r0, [pc, #56]	@ (80004d8 <main+0xe8>)
 800049e:	f7ff fea7 	bl	80001f0 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	490c      	ldr	r1, [pc, #48]	@ (80004d8 <main+0xe8>)
 80004a8:	4807      	ldr	r0, [pc, #28]	@ (80004c8 <main+0xd8>)
 80004aa:	f000 fd45 	bl	8000f38 <USART_SendData>
	printf("Hello from STM32\r\n");
 80004ae:	480b      	ldr	r0, [pc, #44]	@ (80004dc <main+0xec>)
 80004b0:	f001 f878 	bl	80015a4 <puts>

	printf("Sum of a+b : %d + %d = %d\r\n",a,b,c);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	68f9      	ldr	r1, [r7, #12]
 80004ba:	4809      	ldr	r0, [pc, #36]	@ (80004e0 <main+0xf0>)
 80004bc:	f001 f80a 	bl	80014d4 <iprintf>

	while(1);
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <main+0xd0>
 80004c4:	2000009c 	.word	0x2000009c
 80004c8:	200000a8 	.word	0x200000a8
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40004400 	.word	0x40004400
 80004d4:	200000cc 	.word	0x200000cc
 80004d8:	20000000 	.word	0x20000000
 80004dc:	08002284 	.word	0x08002284
 80004e0:	08002298 	.word	0x08002298

080004e4 <USART2_IRQHandler>:

	return 0;
}

void USART2_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	USART_IRQHandling(&USART_Handle);
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <USART2_IRQHandler+0x10>)
 80004ea:	f000 fda9 	bl	8001040 <USART_IRQHandling>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000a8 	.word	0x200000a8

080004f8 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t Event)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
	if(Event == USART_EV_RX_CMPLT)
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d105      	bne.n	8000516 <USART_ApplicationEventCallback+0x1e>
	{
		printf("%c\r\n", (char)rcvd_data);
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <USART_ApplicationEventCallback+0x28>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <USART_ApplicationEventCallback+0x2c>)
 8000512:	f000 ffdf 	bl	80014d4 <iprintf>
	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000cc 	.word	0x200000cc
 8000524:	080022b4 	.word	0x080022b4

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	@ (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	@ (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f001 f959 	bl	800180c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff ff49 	bl	80003f0 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800056c:	080022fc 	.word	0x080022fc
  ldr r2, =_sbss
 8000570:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000574:	2000021c 	.word	0x2000021c

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <GPIO_PeriClk_Control>:
 *      Author: Ibrahim
 */
#include "stm32f407xx_gpio_driver.h"

void GPIO_PeriClk_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d162      	bne.n	8000654 <GPIO_PeriClk_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a64      	ldr	r2, [pc, #400]	@ (8000724 <GPIO_PeriClk_Control+0x1a8>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClk_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000596:	4b64      	ldr	r3, [pc, #400]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a63      	ldr	r2, [pc, #396]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80005a2:	e0b9      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a61      	ldr	r2, [pc, #388]	@ (800072c <GPIO_PeriClk_Control+0x1b0>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <GPIO_PeriClk_Control+0x3e>
			GPIOB_PCLK_EN();
 80005ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	4a5d      	ldr	r2, [pc, #372]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b8:	e0ae      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000730 <GPIO_PeriClk_Control+0x1b4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClk_Control+0x54>
			GPIOC_PCLK_EN();
 80005c2:	4b59      	ldr	r3, [pc, #356]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a58      	ldr	r2, [pc, #352]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ce:	e0a3      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a58      	ldr	r2, [pc, #352]	@ (8000734 <GPIO_PeriClk_Control+0x1b8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClk_Control+0x6a>
			GPIOD_PCLK_EN();
 80005d8:	4b53      	ldr	r3, [pc, #332]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	4a52      	ldr	r2, [pc, #328]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e4:	e098      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a53      	ldr	r2, [pc, #332]	@ (8000738 <GPIO_PeriClk_Control+0x1bc>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClk_Control+0x80>
			GPIOE_PCLK_EN();
 80005ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fa:	e08d      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a4f      	ldr	r2, [pc, #316]	@ (800073c <GPIO_PeriClk_Control+0x1c0>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <GPIO_PeriClk_Control+0x96>
			GPIOF_PCLK_EN();
 8000604:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a47      	ldr	r2, [pc, #284]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000610:	e082      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a4a      	ldr	r2, [pc, #296]	@ (8000740 <GPIO_PeriClk_Control+0x1c4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClk_Control+0xac>
			GPIOG_PCLK_EN();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000626:	e077      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a46      	ldr	r2, [pc, #280]	@ (8000744 <GPIO_PeriClk_Control+0x1c8>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PeriClk_Control+0xc2>
			GPIOH_PCLK_EN();
 8000630:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800063c:	e06c      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a41      	ldr	r2, [pc, #260]	@ (8000748 <GPIO_PeriClk_Control+0x1cc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d168      	bne.n	8000718 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_EN();
 8000646:	4b38      	ldr	r3, [pc, #224]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a37      	ldr	r2, [pc, #220]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000652:	e061      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		if(pGPIOx == GPIOA)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <GPIO_PeriClk_Control+0x1a8>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClk_Control+0xee>
			GPIOA_PCLK_DI();
 800065c:	4b32      	ldr	r3, [pc, #200]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a31      	ldr	r2, [pc, #196]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000668:	e056      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a2f      	ldr	r2, [pc, #188]	@ (800072c <GPIO_PeriClk_Control+0x1b0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d106      	bne.n	8000680 <GPIO_PeriClk_Control+0x104>
			GPIOB_PCLK_DI();
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000678:	f023 0302 	bic.w	r3, r3, #2
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800067e:	e04b      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a2b      	ldr	r2, [pc, #172]	@ (8000730 <GPIO_PeriClk_Control+0x1b4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClk_Control+0x11a>
			GPIOC_PCLK_DI();
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800068e:	f023 0304 	bic.w	r3, r3, #4
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000694:	e040      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <GPIO_PeriClk_Control+0x1b8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClk_Control+0x130>
			GPIOD_PCLK_DI();
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006a4:	f023 0308 	bic.w	r3, r3, #8
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006aa:	e035      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a22      	ldr	r2, [pc, #136]	@ (8000738 <GPIO_PeriClk_Control+0x1bc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <GPIO_PeriClk_Control+0x146>
			GPIOE_PCLK_DI();
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006ba:	f023 0310 	bic.w	r3, r3, #16
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c0:	e02a      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <GPIO_PeriClk_Control+0x1c0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PeriClk_Control+0x15c>
			GPIOF_PCLK_DI();
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006d0:	f023 0320 	bic.w	r3, r3, #32
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006d6:	e01f      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <GPIO_PeriClk_Control+0x1c4>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <GPIO_PeriClk_Control+0x172>
			GPIOG_PCLK_DI();
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ec:	e014      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <GPIO_PeriClk_Control+0x1c8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <GPIO_PeriClk_Control+0x188>
			GPIOH_PCLK_DI();
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 80006fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000702:	e009      	b.n	8000718 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <GPIO_PeriClk_Control+0x1cc>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d105      	bne.n	8000718 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_DI();
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <GPIO_PeriClk_Control+0x1ac>)
 8000712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40020000 	.word	0x40020000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40021000 	.word	0x40021000
 800073c:	40021400 	.word	0x40021400
 8000740:	40021800 	.word	0x40021800
 8000744:	40021c00 	.word	0x40021c00
 8000748:	40022000 	.word	0x40022000

0800074c <gpio_init>:

void gpio_init(GPIO_Handle_t *pGPIO_Handle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint8_t mode;

	//Enable peripheral clock
	GPIO_PeriClk_Control(pGPIO_Handle->pGPIOx, ENABLE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff0e 	bl	800057c <GPIO_PeriClk_Control>

	//1. Configuring mode
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	617b      	str	r3, [r7, #20]
	mode=temp;
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	74fb      	strb	r3, [r7, #19]

	//Clear the MODER bits (Bits cleared = input mode)
	pGPIO_Handle->pGPIOx->MODER &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2103      	movs	r1, #3
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	601a      	str	r2, [r3, #0]

	if(mode <= GPIO_MODE_ANALOG)
 8000788:	7cfb      	ldrb	r3, [r7, #19]
 800078a:	2b03      	cmp	r3, #3
 800078c:	f200 80a0 	bhi.w	80008d0 <gpio_init+0x184>
	{
		pGPIO_Handle->pGPIOx->MODER |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6819      	ldr	r1, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	409a      	lsls	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
		if(mode == GPIO_MODE_OUT)
 80007a8:	7cfb      	ldrb	r3, [r7, #19]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d13b      	bne.n	8000826 <gpio_init+0xda>
		{
			//Configure output type and speed (First doing speed)
			temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	617b      	str	r3, [r7, #20]
			pGPIO_Handle->pGPIOx->OSPEEDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	609a      	str	r2, [r3, #8]
			pGPIO_Handle->pGPIOx->OSPEEDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6899      	ldr	r1, [r3, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	409a      	lsls	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	609a      	str	r2, [r3, #8]

			//Configuring op type
			temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	79db      	ldrb	r3, [r3, #7]
 80007ee:	617b      	str	r3, [r7, #20]
			pGPIO_Handle->pGPIOx->OTYPER &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2301      	movs	r3, #1
 80007fe:	408b      	lsls	r3, r1
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	605a      	str	r2, [r3, #4]
			pGPIO_Handle->pGPIOx->OTYPER |= (temp << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6859      	ldr	r1, [r3, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	461a      	mov	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa03 f202 	lsl.w	r2, r3, r2
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	430a      	orrs	r2, r1
 8000824:	605a      	str	r2, [r3, #4]
		}

		//Configuring PUPD
		temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a1b      	ldrb	r3, [r3, #8]
 800082a:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->PUPDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2103      	movs	r1, #3
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	400a      	ands	r2, r1
 8000848:	60da      	str	r2, [r3, #12]
		pGPIO_Handle->pGPIOx->PUPDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68d9      	ldr	r1, [r3, #12]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	409a      	lsls	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	60da      	str	r2, [r3, #12]

		if(mode == GPIO_MODE_ALTFN)
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	2b02      	cmp	r3, #2
 8000866:	f040 80eb 	bne.w	8000a40 <gpio_init+0x2f4>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	73fb      	strb	r3, [r7, #15]
			temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	73bb      	strb	r3, [r7, #14]
			pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	3208      	adds	r2, #8
 8000884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	7bfa      	ldrb	r2, [r7, #15]
 800089c:	4001      	ands	r1, r0
 800089e:	3208      	adds	r2, #8
 80008a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	3208      	adds	r2, #8
 80008ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7a5b      	ldrb	r3, [r3, #9]
 80008b4:	461a      	mov	r2, r3
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	4301      	orrs	r1, r0
 80008c8:	3208      	adds	r2, #8
 80008ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//3. Enable the IRQ by unmasking it in EXTI reg
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
	}

}
 80008ce:	e0b7      	b.n	8000a40 <gpio_init+0x2f4>
		SYSCFG_PCLK_EN();
 80008d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <gpio_init+0x2fc>)
 80008d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d4:	4a5c      	ldr	r2, [pc, #368]	@ (8000a48 <gpio_init+0x2fc>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	6453      	str	r3, [r2, #68]	@ 0x44
		if(mode == GPIO_MODE_IT_RT)
 80008dc:	7cfb      	ldrb	r3, [r7, #19]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d117      	bne.n	8000912 <gpio_init+0x1c6>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <gpio_init+0x300>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	7912      	ldrb	r2, [r2, #4]
 80008ea:	4611      	mov	r1, r2
 80008ec:	2201      	movs	r2, #1
 80008ee:	408a      	lsls	r2, r1
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a56      	ldr	r2, [pc, #344]	@ (8000a4c <gpio_init+0x300>)
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80008f8:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <gpio_init+0x300>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7912      	ldrb	r2, [r2, #4]
 8000900:	4611      	mov	r1, r2
 8000902:	2201      	movs	r2, #1
 8000904:	408a      	lsls	r2, r1
 8000906:	43d2      	mvns	r2, r2
 8000908:	4611      	mov	r1, r2
 800090a:	4a50      	ldr	r2, [pc, #320]	@ (8000a4c <gpio_init+0x300>)
 800090c:	400b      	ands	r3, r1
 800090e:	60d3      	str	r3, [r2, #12]
 8000910:	e033      	b.n	800097a <gpio_init+0x22e>
		else if(mode == GPIO_MODE_IT_FT)
 8000912:	7cfb      	ldrb	r3, [r7, #19]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d117      	bne.n	8000948 <gpio_init+0x1fc>
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <gpio_init+0x300>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	7912      	ldrb	r2, [r2, #4]
 8000920:	4611      	mov	r1, r2
 8000922:	2201      	movs	r2, #1
 8000924:	408a      	lsls	r2, r1
 8000926:	4611      	mov	r1, r2
 8000928:	4a48      	ldr	r2, [pc, #288]	@ (8000a4c <gpio_init+0x300>)
 800092a:	430b      	orrs	r3, r1
 800092c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <gpio_init+0x300>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	7912      	ldrb	r2, [r2, #4]
 8000936:	4611      	mov	r1, r2
 8000938:	2201      	movs	r2, #1
 800093a:	408a      	lsls	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <gpio_init+0x300>)
 8000942:	400b      	ands	r3, r1
 8000944:	6093      	str	r3, [r2, #8]
 8000946:	e018      	b.n	800097a <gpio_init+0x22e>
		else if(mode == GPIO_MODE_IT_RFT)
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	2b06      	cmp	r3, #6
 800094c:	d115      	bne.n	800097a <gpio_init+0x22e>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800094e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <gpio_init+0x300>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7912      	ldrb	r2, [r2, #4]
 8000956:	4611      	mov	r1, r2
 8000958:	2201      	movs	r2, #1
 800095a:	408a      	lsls	r2, r1
 800095c:	4611      	mov	r1, r2
 800095e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a4c <gpio_init+0x300>)
 8000960:	430b      	orrs	r3, r1
 8000962:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000964:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <gpio_init+0x300>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7912      	ldrb	r2, [r2, #4]
 800096c:	4611      	mov	r1, r2
 800096e:	2201      	movs	r2, #1
 8000970:	408a      	lsls	r2, r1
 8000972:	4611      	mov	r1, r2
 8000974:	4a35      	ldr	r2, [pc, #212]	@ (8000a4c <gpio_init+0x300>)
 8000976:	430b      	orrs	r3, r1
 8000978:	60d3      	str	r3, [r2, #12]
		ofst = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4) ;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	74bb      	strb	r3, [r7, #18]
		temp1 = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4) ;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	f003 0303 	and.w	r3, r3, #3
 800098a:	747b      	strb	r3, [r7, #17]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <gpio_init+0x304>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d024      	beq.n	80009e0 <gpio_init+0x294>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a54 <gpio_init+0x308>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d01d      	beq.n	80009dc <gpio_init+0x290>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a58 <gpio_init+0x30c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d016      	beq.n	80009d8 <gpio_init+0x28c>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2b      	ldr	r2, [pc, #172]	@ (8000a5c <gpio_init+0x310>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d00f      	beq.n	80009d4 <gpio_init+0x288>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a29      	ldr	r2, [pc, #164]	@ (8000a60 <gpio_init+0x314>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d008      	beq.n	80009d0 <gpio_init+0x284>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <gpio_init+0x318>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d101      	bne.n	80009cc <gpio_init+0x280>
 80009c8:	2305      	movs	r3, #5
 80009ca:	e00a      	b.n	80009e2 <gpio_init+0x296>
 80009cc:	23ff      	movs	r3, #255	@ 0xff
 80009ce:	e008      	b.n	80009e2 <gpio_init+0x296>
 80009d0:	2304      	movs	r3, #4
 80009d2:	e006      	b.n	80009e2 <gpio_init+0x296>
 80009d4:	2303      	movs	r3, #3
 80009d6:	e004      	b.n	80009e2 <gpio_init+0x296>
 80009d8:	2302      	movs	r3, #2
 80009da:	e002      	b.n	80009e2 <gpio_init+0x296>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <gpio_init+0x296>
 80009e0:	2300      	movs	r3, #0
 80009e2:	743b      	strb	r3, [r7, #16]
		SYSCFG->EXTICR[ofst] &= ~(0xF << (4*temp1));
 80009e4:	4a20      	ldr	r2, [pc, #128]	@ (8000a68 <gpio_init+0x31c>)
 80009e6:	7cbb      	ldrb	r3, [r7, #18]
 80009e8:	3302      	adds	r3, #2
 80009ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ee:	7c7b      	ldrb	r3, [r7, #17]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	210f      	movs	r1, #15
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	491a      	ldr	r1, [pc, #104]	@ (8000a68 <gpio_init+0x31c>)
 80009fe:	7cbb      	ldrb	r3, [r7, #18]
 8000a00:	4002      	ands	r2, r0
 8000a02:	3302      	adds	r3, #2
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[ofst] |= (portcode << (4*temp1));
 8000a08:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <gpio_init+0x31c>)
 8000a0a:	7cbb      	ldrb	r3, [r7, #18]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a12:	7c39      	ldrb	r1, [r7, #16]
 8000a14:	7c7b      	ldrb	r3, [r7, #17]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	4912      	ldr	r1, [pc, #72]	@ (8000a68 <gpio_init+0x31c>)
 8000a20:	7cbb      	ldrb	r3, [r7, #18]
 8000a22:	4302      	orrs	r2, r0
 8000a24:	3302      	adds	r3, #2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <gpio_init+0x300>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	7912      	ldrb	r2, [r2, #4]
 8000a32:	4611      	mov	r1, r2
 8000a34:	2201      	movs	r2, #1
 8000a36:	408a      	lsls	r2, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <gpio_init+0x300>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40013c00 	.word	0x40013c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40013800 	.word	0x40013800

08000a6c <RCC_GetPll_Output>:

uint16_t AHB_Prescalar_Div_Val[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB_Prescalar_Div_Val[4] = {2, 4, 8, 16};

uint32_t RCC_GetPll_Output()
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <RCC_GetPCLK2Value>:
uint32_t RCC_GetPCLK2Value()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
	// TODO
	uint8_t temp = (RCC->CFGR >> 2) & 0x03;		//System clk switch status
 8000a82:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <RCC_GetPCLK2Value+0x9c>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	71fb      	strb	r3, [r7, #7]
	uint16_t ahbp;
	uint8_t apbp2;

	uint32_t sysclk, PClk2;

	if(temp==0)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <RCC_GetPCLK2Value+0x20>
		sysclk = 16000000;
 8000a96:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <RCC_GetPCLK2Value+0xa0>)
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	e00b      	b.n	8000ab4 <RCC_GetPCLK2Value+0x38>
	else if(temp==1)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d102      	bne.n	8000aa8 <RCC_GetPCLK2Value+0x2c>
		sysclk = 8000000;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <RCC_GetPCLK2Value+0xa4>)
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	e005      	b.n	8000ab4 <RCC_GetPCLK2Value+0x38>
	else if(temp==2)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d102      	bne.n	8000ab4 <RCC_GetPCLK2Value+0x38>
		sysclk = RCC_GetPll_Output();
 8000aae:	f7ff ffdd 	bl	8000a6c <RCC_GetPll_Output>
 8000ab2:	60b8      	str	r0, [r7, #8]

	temp = (RCC->CFGR >> 4) & 0x0F;			//HPRE bits (AHB prescalar bits)
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <RCC_GetPCLK2Value+0x9c>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	091b      	lsrs	r3, r3, #4
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	71fb      	strb	r3, [r7, #7]
	if(temp < 8)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d802      	bhi.n	8000ace <RCC_GetPCLK2Value+0x52>
		ahbp = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	81fb      	strh	r3, [r7, #14]
 8000acc:	e005      	b.n	8000ada <RCC_GetPCLK2Value+0x5e>
	else
		ahbp = AHB_Prescalar_Div_Val[temp-8];
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3b08      	subs	r3, #8
 8000ad2:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <RCC_GetPCLK2Value+0xa8>)
 8000ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad8:	81fb      	strh	r3, [r7, #14]

	temp = (RCC->CFGR >> 13) & 0x07;			//PPRE2 bits (APB2 prescalar bits)
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <RCC_GetPCLK2Value+0x9c>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	0b5b      	lsrs	r3, r3, #13
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	71fb      	strb	r3, [r7, #7]
	if(temp < 4)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d802      	bhi.n	8000af4 <RCC_GetPCLK2Value+0x78>
		apbp2 = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	737b      	strb	r3, [r7, #13]
 8000af2:	e004      	b.n	8000afe <RCC_GetPCLK2Value+0x82>
	else
		apbp2 = APB_Prescalar_Div_Val[temp-4];
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	3b04      	subs	r3, #4
 8000af8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <RCC_GetPCLK2Value+0xac>)
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	737b      	strb	r3, [r7, #13]

	PClk2 = (sysclk / ahbp) / apbp2;
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b06:	7b7b      	ldrb	r3, [r7, #13]
 8000b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0c:	603b      	str	r3, [r7, #0]

	return PClk2;
 8000b0e:	683b      	ldr	r3, [r7, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	00f42400 	.word	0x00f42400
 8000b20:	007a1200 	.word	0x007a1200
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	2000001c 	.word	0x2000001c

08000b2c <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
	uint8_t temp = (RCC->CFGR >> 2) & 0x03;		//System clk switch status
 8000b32:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	71fb      	strb	r3, [r7, #7]
	uint16_t ahbp;
	uint8_t apbp1;

	uint32_t sysclk, PClk1;

	if(temp==0)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <RCC_GetPCLK1Value+0xa0>)
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e00b      	b.n	8000b64 <RCC_GetPCLK1Value+0x38>
	else if(temp==1)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <RCC_GetPCLK1Value+0x2c>
		sysclk = 8000000;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <RCC_GetPCLK1Value+0xa4>)
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	e005      	b.n	8000b64 <RCC_GetPCLK1Value+0x38>
	else if(temp==2)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d102      	bne.n	8000b64 <RCC_GetPCLK1Value+0x38>
		sysclk = RCC_GetPll_Output();
 8000b5e:	f7ff ff85 	bl	8000a6c <RCC_GetPll_Output>
 8000b62:	60b8      	str	r0, [r7, #8]

	temp = (RCC->CFGR >> 4) & 0x0F;			//HPRE bits (AHB prescalar bits)
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	091b      	lsrs	r3, r3, #4
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	71fb      	strb	r3, [r7, #7]
	if(temp < 8)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d802      	bhi.n	8000b7e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	81fb      	strh	r3, [r7, #14]
 8000b7c:	e005      	b.n	8000b8a <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_Prescalar_Div_Val[temp-8];
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	3b08      	subs	r3, #8
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <RCC_GetPCLK1Value+0xa8>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	81fb      	strh	r3, [r7, #14]

	temp = (RCC->CFGR >> 10) & 0x07;			//PPRE1 bits (APB1 prescalar bits)
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	0a9b      	lsrs	r3, r3, #10
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	71fb      	strb	r3, [r7, #7]
	if(temp < 4)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d802      	bhi.n	8000ba4 <RCC_GetPCLK1Value+0x78>
		apbp1 = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	737b      	strb	r3, [r7, #13]
 8000ba2:	e004      	b.n	8000bae <RCC_GetPCLK1Value+0x82>
	else
		apbp1 = APB_Prescalar_Div_Val[temp-4];
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <RCC_GetPCLK1Value+0xac>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	737b      	strb	r3, [r7, #13]

	PClk1 = (sysclk / ahbp) / apbp1;
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	603b      	str	r3, [r7, #0]

	return PClk1;
 8000bbe:	683b      	ldr	r3, [r7, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	00f42400 	.word	0x00f42400
 8000bd0:	007a1200 	.word	0x007a1200
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	2000001c 	.word	0x2000001c

08000bdc <USART_Peri_Clk_Control>:
static void USART_HandleTXEInterrupt(USART_Handle_t *pUSARTHandle);
static void USART_HandleTCInterrupt(USART_Handle_t *pUSARTHandle);
static void USART_CloseReception(USART_Handle_t *pUSARTHandle);

void USART_Peri_Clk_Control(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d141      	bne.n	8000c72 <USART_Peri_Clk_Control+0x96>
	{
		if(pUSARTx == USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a43      	ldr	r2, [pc, #268]	@ (8000d00 <USART_Peri_Clk_Control+0x124>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <USART_Peri_Clk_Control+0x28>
		{
			USART1_PCLK_EN();
 8000bf6:	4b43      	ldr	r3, [pc, #268]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a42      	ldr	r2, [pc, #264]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000c02:	e077      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a40      	ldr	r2, [pc, #256]	@ (8000d08 <USART_Peri_Clk_Control+0x12c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d106      	bne.n	8000c1a <USART_Peri_Clk_Control+0x3e>
			USART2_PCLK_EN();
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	4a3c      	ldr	r2, [pc, #240]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c18:	e06c      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == USART3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d0c <USART_Peri_Clk_Control+0x130>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <USART_Peri_Clk_Control+0x54>
			USART3_PCLK_EN();
 8000c22:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a37      	ldr	r2, [pc, #220]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c2e:	e061      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == UART4)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a37      	ldr	r2, [pc, #220]	@ (8000d10 <USART_Peri_Clk_Control+0x134>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <USART_Peri_Clk_Control+0x6a>
			UART4_PCLK_EN();
 8000c38:	4b32      	ldr	r3, [pc, #200]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	4a31      	ldr	r2, [pc, #196]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c44:	e056      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if(pUSARTx == UART5)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a32      	ldr	r2, [pc, #200]	@ (8000d14 <USART_Peri_Clk_Control+0x138>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d106      	bne.n	8000c5c <USART_Peri_Clk_Control+0x80>
			UART5_PCLK_EN();
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a2c      	ldr	r2, [pc, #176]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c5a:	e04b      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if(pUSARTx == USART6)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d18 <USART_Peri_Clk_Control+0x13c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d147      	bne.n	8000cf4 <USART_Peri_Clk_Control+0x118>
			USART6_PCLK_EN();
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c68:	4a26      	ldr	r2, [pc, #152]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c70:	e040      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		if(pUSARTx == USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <USART_Peri_Clk_Control+0x124>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <USART_Peri_Clk_Control+0xac>
			USART1_PCLK_DI();
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c80:	f023 0310 	bic.w	r3, r3, #16
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c86:	e035      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == USART2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d08 <USART_Peri_Clk_Control+0x12c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d106      	bne.n	8000c9e <USART_Peri_Clk_Control+0xc2>
			USART2_PCLK_DI();
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000c96:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000c9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c9c:	e02a      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == USART3)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d0c <USART_Peri_Clk_Control+0x130>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d106      	bne.n	8000cb4 <USART_Peri_Clk_Control+0xd8>
			USART3_PCLK_DI();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cb2:	e01f      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if (pUSARTx == UART4)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a16      	ldr	r2, [pc, #88]	@ (8000d10 <USART_Peri_Clk_Control+0x134>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d106      	bne.n	8000cca <USART_Peri_Clk_Control+0xee>
			UART4_PCLK_DI();
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cc2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cc8:	e014      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if(pUSARTx == UART5)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <USART_Peri_Clk_Control+0x138>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d106      	bne.n	8000ce0 <USART_Peri_Clk_Control+0x104>
			UART5_PCLK_DI();
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cde:	e009      	b.n	8000cf4 <USART_Peri_Clk_Control+0x118>
		else if(pUSARTx == USART6)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <USART_Peri_Clk_Control+0x13c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d105      	bne.n	8000cf4 <USART_Peri_Clk_Control+0x118>
			USART6_PCLK_DI();
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cec:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <USART_Peri_Clk_Control+0x128>)
 8000cee:	f023 0320 	bic.w	r3, r3, #32
 8000cf2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40004800 	.word	0x40004800
 8000d10:	40004c00 	.word	0x40004c00
 8000d14:	40005000 	.word	0x40005000
 8000d18:	40011400 	.word	0x40011400

08000d1c <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <USART_Init>:

void USART_Init(USART_Handle_t *pUSART_Handle)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]

	/* Enable Peripheral clock */
	USART_Peri_Clk_Control(pUSART_Handle->pUSARTx, ENABLE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2101      	movs	r1, #1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff3f 	bl	8000bdc <USART_Peri_Clk_Control>

	/******************************** Configuration of CR1******************************************/

	//Enable the USART
	tempreg |= (1 << USART_CR1_UE);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d64:	60fb      	str	r3, [r7, #12]

	//Configuring mode
	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d104      	bne.n	8000d78 <USART_Init+0x32>
	{
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f043 030c 	orr.w	r3, r3, #12
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e010      	b.n	8000d9a <USART_Init+0x54>
	}
	else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d104      	bne.n	8000d8a <USART_Init+0x44>
	{
		tempreg |= (1 << USART_CR1_RE);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e007      	b.n	8000d9a <USART_Init+0x54>
	}
	else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <USART_Init+0x54>
	{
		tempreg |= (1 << USART_CR1_TE);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	60fb      	str	r3, [r7, #12]
	}

	// Configure word length
	tempreg |= pUSART_Handle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	78db      	ldrb	r3, [r3, #3]
 8000d9e:	031b      	lsls	r3, r3, #12
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]

	//Parity control
	if(pUSART_Handle->USART_Config.USART_Parity == USART_PARITY_EN_EVEN)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d104      	bne.n	8000db8 <USART_Init+0x72>
	{
		tempreg |= (1 << USART_CR1_PCE);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e007      	b.n	8000dc8 <USART_Init+0x82>
	}
	else if(pUSART_Handle->USART_Config.USART_Parity == USART_PARITY_EN_ODD)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d103      	bne.n	8000dc8 <USART_Init+0x82>
	{
		tempreg |= ( (1 << USART_CR1_PCE) | (1 << USART_CR1_PS) );
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000dc6:	60fb      	str	r3, [r7, #12]
	}

	pUSART_Handle->pUSARTx->CR1 = tempreg;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/
	tempreg = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]

	//Configure the no of stop bits
	tempreg |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	031b      	lsls	r3, r3, #12
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSARTx->CR2 = tempreg;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/
	tempreg = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]

	//Configure hardware flow control
	tempreg |= (pUSART_Handle->USART_Config.USART_HWFlowControl << USART_CR3_RTSE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	USART_SetBaudRate(pUSART_Handle->pUSARTx,pUSART_Handle->USART_Config.USART_Baud);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4610      	mov	r0, r2
 8000e04:	f000 f804 	bl	8000e10 <USART_SetBaudRate>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <USART_SetBaudRate>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	uint32_t PClkx, USARTdiv;
	uint16_t mantissa, fraction;

	uint8_t over8 = (pUSARTx->CR1 >> USART_CR1_OVER8) & 0x01;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	0bdb      	lsrs	r3, r3, #15
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	72fb      	strb	r3, [r7, #11]

	if((pUSARTx == USART1) || (pUSARTx == USART6))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a40      	ldr	r2, [pc, #256]	@ (8000f2c <USART_SetBaudRate+0x11c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <USART_SetBaudRate+0x28>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a3f      	ldr	r2, [pc, #252]	@ (8000f30 <USART_SetBaudRate+0x120>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d103      	bne.n	8000e40 <USART_SetBaudRate+0x30>
		PClkx = RCC_GetPCLK2Value();
 8000e38:	f7ff fe20 	bl	8000a7c <RCC_GetPCLK2Value>
 8000e3c:	6178      	str	r0, [r7, #20]
 8000e3e:	e002      	b.n	8000e46 <USART_SetBaudRate+0x36>
	else
		PClkx = RCC_GetPCLK1Value();
 8000e40:	f7ff fe74 	bl	8000b2c <RCC_GetPCLK1Value>
 8000e44:	6178      	str	r0, [r7, #20]

	if(over8)
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <USART_SetBaudRate+0x54>
		USARTdiv = (25 * PClkx) / (2 * BaudRate);
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	009a      	lsls	r2, r3, #2
 8000e56:	441a      	add	r2, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e00a      	b.n	8000e7a <USART_SetBaudRate+0x6a>
	else
		USARTdiv = (25 * PClkx) / (4 * BaudRate);
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	441a      	add	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e78:	613b      	str	r3, [r7, #16]

	mantissa = USARTdiv / 100;
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <USART_SetBaudRate+0x124>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	81fb      	strh	r3, [r7, #14]
	fraction = USARTdiv - (mantissa*100);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	89fb      	ldrh	r3, [r7, #14]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	0089      	lsls	r1, r1, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	4619      	mov	r1, r3
 8000e94:	0088      	lsls	r0, r1, #2
 8000e96:	4619      	mov	r1, r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	440b      	add	r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	81bb      	strh	r3, [r7, #12]

	if(over8)
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d017      	beq.n	8000eda <USART_SetBaudRate+0xca>
	{
		fraction = (fraction*8) + 50;	//to round off
 8000eaa:	89bb      	ldrh	r3, [r7, #12]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3332      	adds	r3, #50	@ 0x32
 8000eb2:	81bb      	strh	r3, [r7, #12]
		fraction = fraction / 100;
 8000eb4:	89bb      	ldrh	r3, [r7, #12]
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f34 <USART_SetBaudRate+0x124>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	095b      	lsrs	r3, r3, #5
 8000ebe:	81bb      	strh	r3, [r7, #12]

		if(fraction > 7)	//Max 3 bits for oversampling by 8 (hence adding carry to mantissa as per RM)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d920      	bls.n	8000f08 <USART_SetBaudRate+0xf8>
		{
			mantissa += (mantissa + (fraction-7));
 8000ec6:	89ba      	ldrh	r2, [r7, #12]
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b07      	subs	r3, #7
 8000ed6:	81fb      	strh	r3, [r7, #14]
 8000ed8:	e016      	b.n	8000f08 <USART_SetBaudRate+0xf8>
		}
	}
	else
	{
		fraction = (fraction*16) + 50;
 8000eda:	89bb      	ldrh	r3, [r7, #12]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3332      	adds	r3, #50	@ 0x32
 8000ee2:	81bb      	strh	r3, [r7, #12]
		fraction = fraction / 100;
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <USART_SetBaudRate+0x124>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	81bb      	strh	r3, [r7, #12]

		if(fraction > 15)	//Max 4 bits for oversampling by 8
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d908      	bls.n	8000f08 <USART_SetBaudRate+0xf8>
		{
			mantissa += (mantissa + (fraction-15));
 8000ef6:	89ba      	ldrh	r2, [r7, #12]
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	4413      	add	r3, r2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b0f      	subs	r3, #15
 8000f06:	81fb      	strh	r3, [r7, #14]
		}
	}

	uint16_t USART_BRR = (mantissa << 4) | (fraction & 0xF);
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	813b      	strh	r3, [r7, #8]

	pUSARTx->BRR = USART_BRR;
 8000f1e:	893a      	ldrh	r2, [r7, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40011400 	.word	0x40011400
 8000f34:	51eb851f 	.word	0x51eb851f

08000f38 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	for(uint32_t i=0;i<Len;i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e036      	b.n	8000fb8 <USART_SendData+0x80>
	{
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000f4a:	bf00      	nop
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fee2 	bl	8000d1c <USART_GetFlagStatus>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f6      	beq.n	8000f4c <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d11d      	bne.n	8000fa2 <USART_SendData+0x6a>
		{
			if(pUSARTHandle->USART_Config.USART_Parity==USART_PARITY_DISABLE)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d110      	bne.n	8000f90 <USART_SendData+0x58>
			{
				//All 9 bits user data
				pdata = (uint16_t*) pTxBuffer;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	613b      	str	r3, [r7, #16]
				pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f80:	605a      	str	r2, [r3, #4]

				pTxBuffer++;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	e010      	b.n	8000fb2 <USART_SendData+0x7a>
			}
			else
			{
				pUSARTHandle->pUSARTx->DR = *pTxBuffer & 0xFF;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	605a      	str	r2, [r3, #4]
				pTxBuffer++;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	e007      	b.n	8000fb2 <USART_SendData+0x7a>
			}
		}
		else
		{
			pUSARTHandle->pUSARTx->DR = *pTxBuffer & 0xFF;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0;i<Len;i++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3c4      	bcc.n	8000f4a <USART_SendData+0x12>
		}
	}

	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000fc0:	bf00      	nop
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2140      	movs	r1, #64	@ 0x40
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fea7 	bl	8000d1c <USART_GetFlagStatus>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f6      	beq.n	8000fc2 <USART_SendData+0x8a>
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <USART_ReceiveDataIT>:
 * 						Incase you want to keep the receive interrupt always enabled,
 * 						pass the macro NO_SPECIFIED_LENGTH in the Len field

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint16_t Len)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	80fb      	strh	r3, [r7, #6]
	uint8_t busystate = pUSARTHandle->RxBusyState;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ff2:	75fb      	strb	r3, [r7, #23]

	if(pUSARTHandle->RxBusyState != USART_BSY_IN_RX)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d019      	beq.n	8001032 <USART_ReceiveDataIT+0x54>
	{
		pUSARTHandle->RxBusyState = USART_BSY_IN_RX;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2202      	movs	r2, #2
 8001002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pUSARTHandle->RxBuf = pRxBuffer;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	61da      	str	r2, [r3, #28]
		pUSARTHandle->RxLen = Len;
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	611a      	str	r2, [r3, #16]

		/* Enable the interrupt bits */
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f042 0220 	orr.w	r2, r2, #32
 8001030:	60da      	str	r2, [r3, #12]
	}

	return busystate;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
}
 8001034:	4618      	mov	r0, r3
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <USART_IRQHandling>:

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint8_t tcie, rxneie, txeie;
	uint8_t tc, rxne, txe;

	/* Event flags */
	rxne 	= USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_RXNE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2120      	movs	r1, #32
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe64 	bl	8000d1c <USART_GetFlagStatus>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
	txe 	= USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe5c 	bl	8000d1c <USART_GetFlagStatus>
 8001064:	4603      	mov	r3, r0
 8001066:	73bb      	strb	r3, [r7, #14]
	tc 		= USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe54 	bl	8000d1c <USART_GetFlagStatus>
 8001074:	4603      	mov	r3, r0
 8001076:	737b      	strb	r3, [r7, #13]

	/* Interrupt control bits */
	tcie	= (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_TCIE) & 0x01 ;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	733b      	strb	r3, [r7, #12]
	txeie 	= (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_TXEIE) & 0x01 ;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	09db      	lsrs	r3, r3, #7
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	72fb      	strb	r3, [r7, #11]
	rxneie 	= (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_RXNEIE) & 0x01 ;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	72bb      	strb	r3, [r7, #10]

	/* Interrupt due to data reception */
	if(rxne && rxneie)
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <USART_IRQHandling+0x7a>
 80010ae:	7abb      	ldrb	r3, [r7, #10]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <USART_IRQHandling+0x7a>
	{
		USART_HandleRXNEInterrupt(pUSARTHandle);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f816 	bl	80010e6 <USART_HandleRXNEInterrupt>
	}

	if(txe && txeie)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <USART_IRQHandling+0x8c>
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <USART_IRQHandling+0x8c>
	{
		USART_HandleTXEInterrupt(pUSARTHandle);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f8a0 	bl	800120c <USART_HandleTXEInterrupt>
	}

	if(tc && tcie)
 80010cc:	7b7b      	ldrb	r3, [r7, #13]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <USART_IRQHandling+0x9e>
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <USART_IRQHandling+0x9e>
	{
		USART_HandleTCInterrupt(pUSARTHandle);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f8a1 	bl	8001220 <USART_HandleTCInterrupt>
	}
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <USART_HandleRXNEInterrupt>:

static void USART_HandleRXNEInterrupt(USART_Handle_t *pUSARTHandle)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	if(pUSARTHandle->RxLen > 0)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d070      	beq.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
	{
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	78db      	ldrb	r3, [r3, #3]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d136      	bne.n	800116c <USART_HandleRXNEInterrupt+0x86>
		{
			if(pUSARTHandle->USART_Config.USART_Parity==USART_PARITY_DISABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d11a      	bne.n	800113c <USART_HandleRXNEInterrupt+0x56>
			{
				//All 9 bits user data
				*(uint16_t*)pUSARTHandle->RxBuf = (pUSARTHandle->pUSARTx->DR) & (uint16_t)0x1FF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	b29a      	uxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001116:	b292      	uxth	r2, r2
 8001118:	801a      	strh	r2, [r3, #0]

				if(pUSARTHandle->RxLen != NO_SPECIFIED_LENGTH)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001122:	4293      	cmp	r3, r2
 8001124:	d058      	beq.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				{
					pUSARTHandle->RxBuf += 2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	1c9a      	adds	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	61da      	str	r2, [r3, #28]
					pUSARTHandle->RxLen -= 2;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	1e9a      	subs	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	e04d      	b.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				}
			}
			else
			{
				*pUSARTHandle->RxBuf = pUSARTHandle->pUSARTx->DR & 0xFF;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

				if(pUSARTHandle->RxLen != NO_SPECIFIED_LENGTH)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001152:	4293      	cmp	r3, r2
 8001154:	d040      	beq.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				{
					pUSARTHandle->RxBuf++;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	61da      	str	r2, [r3, #28]
					pUSARTHandle->RxLen--;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	e035      	b.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				}
			}
		}
		else
		{
			if(pUSARTHandle->USART_Config.USART_Parity==USART_PARITY_DISABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d117      	bne.n	80011a4 <USART_HandleRXNEInterrupt+0xbe>
			{
				*pUSARTHandle->RxBuf = pUSARTHandle->pUSARTx->DR & 0xFF;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

				if(pUSARTHandle->RxLen != NO_SPECIFIED_LENGTH)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118a:	4293      	cmp	r3, r2
 800118c:	d024      	beq.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				{
					pUSARTHandle->RxBuf++;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	61da      	str	r2, [r3, #28]
					pUSARTHandle->RxLen--;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	e019      	b.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				}
			}
			else
			{
				//Read only 7 bits as 1 bit for parity
				*pUSARTHandle->RxBuf = pUSARTHandle->pUSARTx->DR & 0x7F;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]

				if(pUSARTHandle->RxLen != NO_SPECIFIED_LENGTH)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d009      	beq.n	80011d8 <USART_HandleRXNEInterrupt+0xf2>
				{
					pUSARTHandle->RxBuf++;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	61da      	str	r2, [r3, #28]
					pUSARTHandle->RxLen--;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]
				}
			}
		}
	}

	if(pUSARTHandle->RxLen == NO_SPECIFIED_LENGTH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d104      	bne.n	80011ee <USART_HandleRXNEInterrupt+0x108>
	{
		USART_ApplicationEventCallback(pUSARTHandle, USART_EV_RX_CMPLT);
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f986 	bl	80004f8 <USART_ApplicationEventCallback>
		{
			USART_CloseReception(pUSARTHandle);
			USART_ApplicationEventCallback(pUSARTHandle, USART_EV_RX_CMPLT);
		}
	}
}
 80011ec:	e00a      	b.n	8001204 <USART_HandleRXNEInterrupt+0x11e>
		if(!(pUSARTHandle->RxLen))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <USART_HandleRXNEInterrupt+0x11e>
			USART_CloseReception(pUSARTHandle);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f81c 	bl	8001234 <USART_CloseReception>
			USART_ApplicationEventCallback(pUSARTHandle, USART_EV_RX_CMPLT);
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f97a 	bl	80004f8 <USART_ApplicationEventCallback>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <USART_HandleTXEInterrupt>:

static void USART_HandleTXEInterrupt(USART_Handle_t *pUSARTHandle)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <USART_HandleTCInterrupt>:
static void USART_HandleTCInterrupt(USART_Handle_t *pUSARTHandle)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <USART_CloseReception>:

static void USART_CloseReception(USART_Handle_t *pUSARTHandle)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	pUSARTHandle->RxBusyState = USART_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	pUSARTHandle->RxBuf = NULL;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
	pUSARTHandle->RxLen = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]

	pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f022 0220 	bic.w	r2, r2, #32
 800125e:	60da      	str	r2, [r3, #12]
	pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f022 0204 	bic.w	r2, r2, #4
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <USART_IRQConfig>:
void USART_IRQConfig(IRQ_Number_t IRQNumber, uint8_t En_or_Di)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if(En_or_Di == ENABLE)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d126      	bne.n	80012e0 <USART_IRQConfig+0x64>
	{
		if(IRQNumber < 32)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b1f      	cmp	r3, #31
 8001296:	d809      	bhi.n	80012ac <USART_IRQConfig+0x30>
		{
			temp = IRQNumber % 32;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER0) = (1 << temp);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <USART_IRQConfig+0xbc>)
 80012a8:	601a      	str	r2, [r3, #0]
		{
			temp = IRQNumber % 32;
			*(NVIC_ICER2) = (1 << temp);
		}
	}
}
 80012aa:	e03f      	b.n	800132c <USART_IRQConfig+0xb0>
		else if(IRQNumber < 64)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b0:	d809      	bhi.n	80012c6 <USART_IRQConfig+0x4a>
			temp = IRQNumber % 32;
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER1) = (1 << temp);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <USART_IRQConfig+0xc0>)
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	e032      	b.n	800132c <USART_IRQConfig+0xb0>
		else if(IRQNumber < 96)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b5f      	cmp	r3, #95	@ 0x5f
 80012ca:	d82f      	bhi.n	800132c <USART_IRQConfig+0xb0>
			temp = IRQNumber % 32;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ISER2) = (1 << temp);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2201      	movs	r2, #1
 80012d8:	409a      	lsls	r2, r3
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <USART_IRQConfig+0xc4>)
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	e025      	b.n	800132c <USART_IRQConfig+0xb0>
		if(IRQNumber < 32)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b1f      	cmp	r3, #31
 80012e4:	d809      	bhi.n	80012fa <USART_IRQConfig+0x7e>
			temp = IRQNumber % 32;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER0) = (1 << temp);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <USART_IRQConfig+0xc8>)
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	e018      	b.n	800132c <USART_IRQConfig+0xb0>
		else if(IRQNumber < 64)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012fe:	d809      	bhi.n	8001314 <USART_IRQConfig+0x98>
			temp = IRQNumber % 32;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER1) = (1 << temp);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2201      	movs	r2, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <USART_IRQConfig+0xcc>)
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	e00b      	b.n	800132c <USART_IRQConfig+0xb0>
		else if(IRQNumber < 96)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b5f      	cmp	r3, #95	@ 0x5f
 8001318:	d808      	bhi.n	800132c <USART_IRQConfig+0xb0>
			temp = IRQNumber % 32;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	73fb      	strb	r3, [r7, #15]
			*(NVIC_ICER2) = (1 << temp);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2201      	movs	r2, #1
 8001326:	409a      	lsls	r2, r3
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <USART_IRQConfig+0xd0>)
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000e104 	.word	0xe000e104
 8001340:	e000e108 	.word	0xe000e108
 8001344:	e000e180 	.word	0xe000e180
 8001348:	e000e184 	.word	0xe000e184
 800134c:	e000e188 	.word	0xe000e188

08001350 <std>:
 8001350:	2300      	movs	r3, #0
 8001352:	b510      	push	{r4, lr}
 8001354:	4604      	mov	r4, r0
 8001356:	e9c0 3300 	strd	r3, r3, [r0]
 800135a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800135e:	6083      	str	r3, [r0, #8]
 8001360:	8181      	strh	r1, [r0, #12]
 8001362:	6643      	str	r3, [r0, #100]	@ 0x64
 8001364:	81c2      	strh	r2, [r0, #14]
 8001366:	6183      	str	r3, [r0, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	2208      	movs	r2, #8
 800136c:	305c      	adds	r0, #92	@ 0x5c
 800136e:	f000 f9f9 	bl	8001764 <memset>
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <std+0x58>)
 8001374:	6263      	str	r3, [r4, #36]	@ 0x24
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <std+0x5c>)
 8001378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <std+0x60>)
 800137c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <std+0x64>)
 8001380:	6323      	str	r3, [r4, #48]	@ 0x30
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <std+0x68>)
 8001384:	6224      	str	r4, [r4, #32]
 8001386:	429c      	cmp	r4, r3
 8001388:	d006      	beq.n	8001398 <std+0x48>
 800138a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800138e:	4294      	cmp	r4, r2
 8001390:	d002      	beq.n	8001398 <std+0x48>
 8001392:	33d0      	adds	r3, #208	@ 0xd0
 8001394:	429c      	cmp	r4, r3
 8001396:	d105      	bne.n	80013a4 <std+0x54>
 8001398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013a0:	f000 ba58 	b.w	8001854 <__retarget_lock_init_recursive>
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop
 80013a8:	080015b5 	.word	0x080015b5
 80013ac:	080015d7 	.word	0x080015d7
 80013b0:	0800160f 	.word	0x0800160f
 80013b4:	08001633 	.word	0x08001633
 80013b8:	200000d0 	.word	0x200000d0

080013bc <stdio_exit_handler>:
 80013bc:	4a02      	ldr	r2, [pc, #8]	@ (80013c8 <stdio_exit_handler+0xc>)
 80013be:	4903      	ldr	r1, [pc, #12]	@ (80013cc <stdio_exit_handler+0x10>)
 80013c0:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <stdio_exit_handler+0x14>)
 80013c2:	f000 b869 	b.w	8001498 <_fwalk_sglue>
 80013c6:	bf00      	nop
 80013c8:	20000020 	.word	0x20000020
 80013cc:	080020f5 	.word	0x080020f5
 80013d0:	20000030 	.word	0x20000030

080013d4 <cleanup_stdio>:
 80013d4:	6841      	ldr	r1, [r0, #4]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <cleanup_stdio+0x34>)
 80013d8:	4299      	cmp	r1, r3
 80013da:	b510      	push	{r4, lr}
 80013dc:	4604      	mov	r4, r0
 80013de:	d001      	beq.n	80013e4 <cleanup_stdio+0x10>
 80013e0:	f000 fe88 	bl	80020f4 <_fflush_r>
 80013e4:	68a1      	ldr	r1, [r4, #8]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <cleanup_stdio+0x38>)
 80013e8:	4299      	cmp	r1, r3
 80013ea:	d002      	beq.n	80013f2 <cleanup_stdio+0x1e>
 80013ec:	4620      	mov	r0, r4
 80013ee:	f000 fe81 	bl	80020f4 <_fflush_r>
 80013f2:	68e1      	ldr	r1, [r4, #12]
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <cleanup_stdio+0x3c>)
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d004      	beq.n	8001404 <cleanup_stdio+0x30>
 80013fa:	4620      	mov	r0, r4
 80013fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001400:	f000 be78 	b.w	80020f4 <_fflush_r>
 8001404:	bd10      	pop	{r4, pc}
 8001406:	bf00      	nop
 8001408:	200000d0 	.word	0x200000d0
 800140c:	20000138 	.word	0x20000138
 8001410:	200001a0 	.word	0x200001a0

08001414 <global_stdio_init.part.0>:
 8001414:	b510      	push	{r4, lr}
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <global_stdio_init.part.0+0x30>)
 8001418:	4c0b      	ldr	r4, [pc, #44]	@ (8001448 <global_stdio_init.part.0+0x34>)
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <global_stdio_init.part.0+0x38>)
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4620      	mov	r0, r4
 8001420:	2200      	movs	r2, #0
 8001422:	2104      	movs	r1, #4
 8001424:	f7ff ff94 	bl	8001350 <std>
 8001428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800142c:	2201      	movs	r2, #1
 800142e:	2109      	movs	r1, #9
 8001430:	f7ff ff8e 	bl	8001350 <std>
 8001434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001438:	2202      	movs	r2, #2
 800143a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800143e:	2112      	movs	r1, #18
 8001440:	f7ff bf86 	b.w	8001350 <std>
 8001444:	20000208 	.word	0x20000208
 8001448:	200000d0 	.word	0x200000d0
 800144c:	080013bd 	.word	0x080013bd

08001450 <__sfp_lock_acquire>:
 8001450:	4801      	ldr	r0, [pc, #4]	@ (8001458 <__sfp_lock_acquire+0x8>)
 8001452:	f000 ba00 	b.w	8001856 <__retarget_lock_acquire_recursive>
 8001456:	bf00      	nop
 8001458:	20000211 	.word	0x20000211

0800145c <__sfp_lock_release>:
 800145c:	4801      	ldr	r0, [pc, #4]	@ (8001464 <__sfp_lock_release+0x8>)
 800145e:	f000 b9fb 	b.w	8001858 <__retarget_lock_release_recursive>
 8001462:	bf00      	nop
 8001464:	20000211 	.word	0x20000211

08001468 <__sinit>:
 8001468:	b510      	push	{r4, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	f7ff fff0 	bl	8001450 <__sfp_lock_acquire>
 8001470:	6a23      	ldr	r3, [r4, #32]
 8001472:	b11b      	cbz	r3, 800147c <__sinit+0x14>
 8001474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001478:	f7ff bff0 	b.w	800145c <__sfp_lock_release>
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__sinit+0x28>)
 800147e:	6223      	str	r3, [r4, #32]
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__sinit+0x2c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f5      	bne.n	8001474 <__sinit+0xc>
 8001488:	f7ff ffc4 	bl	8001414 <global_stdio_init.part.0>
 800148c:	e7f2      	b.n	8001474 <__sinit+0xc>
 800148e:	bf00      	nop
 8001490:	080013d5 	.word	0x080013d5
 8001494:	20000208 	.word	0x20000208

08001498 <_fwalk_sglue>:
 8001498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800149c:	4607      	mov	r7, r0
 800149e:	4688      	mov	r8, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	2600      	movs	r6, #0
 80014a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014a8:	f1b9 0901 	subs.w	r9, r9, #1
 80014ac:	d505      	bpl.n	80014ba <_fwalk_sglue+0x22>
 80014ae:	6824      	ldr	r4, [r4, #0]
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d1f7      	bne.n	80014a4 <_fwalk_sglue+0xc>
 80014b4:	4630      	mov	r0, r6
 80014b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014ba:	89ab      	ldrh	r3, [r5, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d907      	bls.n	80014d0 <_fwalk_sglue+0x38>
 80014c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014c4:	3301      	adds	r3, #1
 80014c6:	d003      	beq.n	80014d0 <_fwalk_sglue+0x38>
 80014c8:	4629      	mov	r1, r5
 80014ca:	4638      	mov	r0, r7
 80014cc:	47c0      	blx	r8
 80014ce:	4306      	orrs	r6, r0
 80014d0:	3568      	adds	r5, #104	@ 0x68
 80014d2:	e7e9      	b.n	80014a8 <_fwalk_sglue+0x10>

080014d4 <iprintf>:
 80014d4:	b40f      	push	{r0, r1, r2, r3}
 80014d6:	b507      	push	{r0, r1, r2, lr}
 80014d8:	4906      	ldr	r1, [pc, #24]	@ (80014f4 <iprintf+0x20>)
 80014da:	ab04      	add	r3, sp, #16
 80014dc:	6808      	ldr	r0, [r1, #0]
 80014de:	f853 2b04 	ldr.w	r2, [r3], #4
 80014e2:	6881      	ldr	r1, [r0, #8]
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f000 fadb 	bl	8001aa0 <_vfiprintf_r>
 80014ea:	b003      	add	sp, #12
 80014ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80014f0:	b004      	add	sp, #16
 80014f2:	4770      	bx	lr
 80014f4:	2000002c 	.word	0x2000002c

080014f8 <_puts_r>:
 80014f8:	6a03      	ldr	r3, [r0, #32]
 80014fa:	b570      	push	{r4, r5, r6, lr}
 80014fc:	6884      	ldr	r4, [r0, #8]
 80014fe:	4605      	mov	r5, r0
 8001500:	460e      	mov	r6, r1
 8001502:	b90b      	cbnz	r3, 8001508 <_puts_r+0x10>
 8001504:	f7ff ffb0 	bl	8001468 <__sinit>
 8001508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800150a:	07db      	lsls	r3, r3, #31
 800150c:	d405      	bmi.n	800151a <_puts_r+0x22>
 800150e:	89a3      	ldrh	r3, [r4, #12]
 8001510:	0598      	lsls	r0, r3, #22
 8001512:	d402      	bmi.n	800151a <_puts_r+0x22>
 8001514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001516:	f000 f99e 	bl	8001856 <__retarget_lock_acquire_recursive>
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	0719      	lsls	r1, r3, #28
 800151e:	d502      	bpl.n	8001526 <_puts_r+0x2e>
 8001520:	6923      	ldr	r3, [r4, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d135      	bne.n	8001592 <_puts_r+0x9a>
 8001526:	4621      	mov	r1, r4
 8001528:	4628      	mov	r0, r5
 800152a:	f000 f8c5 	bl	80016b8 <__swsetup_r>
 800152e:	b380      	cbz	r0, 8001592 <_puts_r+0x9a>
 8001530:	f04f 35ff 	mov.w	r5, #4294967295
 8001534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001536:	07da      	lsls	r2, r3, #31
 8001538:	d405      	bmi.n	8001546 <_puts_r+0x4e>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	059b      	lsls	r3, r3, #22
 800153e:	d402      	bmi.n	8001546 <_puts_r+0x4e>
 8001540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001542:	f000 f989 	bl	8001858 <__retarget_lock_release_recursive>
 8001546:	4628      	mov	r0, r5
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	2b00      	cmp	r3, #0
 800154c:	da04      	bge.n	8001558 <_puts_r+0x60>
 800154e:	69a2      	ldr	r2, [r4, #24]
 8001550:	429a      	cmp	r2, r3
 8001552:	dc17      	bgt.n	8001584 <_puts_r+0x8c>
 8001554:	290a      	cmp	r1, #10
 8001556:	d015      	beq.n	8001584 <_puts_r+0x8c>
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	6022      	str	r2, [r4, #0]
 800155e:	7019      	strb	r1, [r3, #0]
 8001560:	68a3      	ldr	r3, [r4, #8]
 8001562:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001566:	3b01      	subs	r3, #1
 8001568:	60a3      	str	r3, [r4, #8]
 800156a:	2900      	cmp	r1, #0
 800156c:	d1ed      	bne.n	800154a <_puts_r+0x52>
 800156e:	2b00      	cmp	r3, #0
 8001570:	da11      	bge.n	8001596 <_puts_r+0x9e>
 8001572:	4622      	mov	r2, r4
 8001574:	210a      	movs	r1, #10
 8001576:	4628      	mov	r0, r5
 8001578:	f000 f85f 	bl	800163a <__swbuf_r>
 800157c:	3001      	adds	r0, #1
 800157e:	d0d7      	beq.n	8001530 <_puts_r+0x38>
 8001580:	250a      	movs	r5, #10
 8001582:	e7d7      	b.n	8001534 <_puts_r+0x3c>
 8001584:	4622      	mov	r2, r4
 8001586:	4628      	mov	r0, r5
 8001588:	f000 f857 	bl	800163a <__swbuf_r>
 800158c:	3001      	adds	r0, #1
 800158e:	d1e7      	bne.n	8001560 <_puts_r+0x68>
 8001590:	e7ce      	b.n	8001530 <_puts_r+0x38>
 8001592:	3e01      	subs	r6, #1
 8001594:	e7e4      	b.n	8001560 <_puts_r+0x68>
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	6022      	str	r2, [r4, #0]
 800159c:	220a      	movs	r2, #10
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e7ee      	b.n	8001580 <_puts_r+0x88>
	...

080015a4 <puts>:
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <puts+0xc>)
 80015a6:	4601      	mov	r1, r0
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f7ff bfa5 	b.w	80014f8 <_puts_r>
 80015ae:	bf00      	nop
 80015b0:	2000002c 	.word	0x2000002c

080015b4 <__sread>:
 80015b4:	b510      	push	{r4, lr}
 80015b6:	460c      	mov	r4, r1
 80015b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015bc:	f000 f8fc 	bl	80017b8 <_read_r>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	bfab      	itete	ge
 80015c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015c6:	89a3      	ldrhlt	r3, [r4, #12]
 80015c8:	181b      	addge	r3, r3, r0
 80015ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015ce:	bfac      	ite	ge
 80015d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015d2:	81a3      	strhlt	r3, [r4, #12]
 80015d4:	bd10      	pop	{r4, pc}

080015d6 <__swrite>:
 80015d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015da:	461f      	mov	r7, r3
 80015dc:	898b      	ldrh	r3, [r1, #12]
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	4605      	mov	r5, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	4616      	mov	r6, r2
 80015e6:	d505      	bpl.n	80015f4 <__swrite+0x1e>
 80015e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ec:	2302      	movs	r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	f000 f8d0 	bl	8001794 <_lseek_r>
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015fe:	81a3      	strh	r3, [r4, #12]
 8001600:	4632      	mov	r2, r6
 8001602:	463b      	mov	r3, r7
 8001604:	4628      	mov	r0, r5
 8001606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	f000 b8e7 	b.w	80017dc <_write_r>

0800160e <__sseek>:
 800160e:	b510      	push	{r4, lr}
 8001610:	460c      	mov	r4, r1
 8001612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001616:	f000 f8bd 	bl	8001794 <_lseek_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	bf15      	itete	ne
 8001620:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800162a:	81a3      	strheq	r3, [r4, #12]
 800162c:	bf18      	it	ne
 800162e:	81a3      	strhne	r3, [r4, #12]
 8001630:	bd10      	pop	{r4, pc}

08001632 <__sclose>:
 8001632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001636:	f000 b89d 	b.w	8001774 <_close_r>

0800163a <__swbuf_r>:
 800163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163c:	460e      	mov	r6, r1
 800163e:	4614      	mov	r4, r2
 8001640:	4605      	mov	r5, r0
 8001642:	b118      	cbz	r0, 800164c <__swbuf_r+0x12>
 8001644:	6a03      	ldr	r3, [r0, #32]
 8001646:	b90b      	cbnz	r3, 800164c <__swbuf_r+0x12>
 8001648:	f7ff ff0e 	bl	8001468 <__sinit>
 800164c:	69a3      	ldr	r3, [r4, #24]
 800164e:	60a3      	str	r3, [r4, #8]
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	071a      	lsls	r2, r3, #28
 8001654:	d501      	bpl.n	800165a <__swbuf_r+0x20>
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	b943      	cbnz	r3, 800166c <__swbuf_r+0x32>
 800165a:	4621      	mov	r1, r4
 800165c:	4628      	mov	r0, r5
 800165e:	f000 f82b 	bl	80016b8 <__swsetup_r>
 8001662:	b118      	cbz	r0, 800166c <__swbuf_r+0x32>
 8001664:	f04f 37ff 	mov.w	r7, #4294967295
 8001668:	4638      	mov	r0, r7
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	6922      	ldr	r2, [r4, #16]
 8001670:	1a98      	subs	r0, r3, r2
 8001672:	6963      	ldr	r3, [r4, #20]
 8001674:	b2f6      	uxtb	r6, r6
 8001676:	4283      	cmp	r3, r0
 8001678:	4637      	mov	r7, r6
 800167a:	dc05      	bgt.n	8001688 <__swbuf_r+0x4e>
 800167c:	4621      	mov	r1, r4
 800167e:	4628      	mov	r0, r5
 8001680:	f000 fd38 	bl	80020f4 <_fflush_r>
 8001684:	2800      	cmp	r0, #0
 8001686:	d1ed      	bne.n	8001664 <__swbuf_r+0x2a>
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	3b01      	subs	r3, #1
 800168c:	60a3      	str	r3, [r4, #8]
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	6022      	str	r2, [r4, #0]
 8001694:	701e      	strb	r6, [r3, #0]
 8001696:	6962      	ldr	r2, [r4, #20]
 8001698:	1c43      	adds	r3, r0, #1
 800169a:	429a      	cmp	r2, r3
 800169c:	d004      	beq.n	80016a8 <__swbuf_r+0x6e>
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	07db      	lsls	r3, r3, #31
 80016a2:	d5e1      	bpl.n	8001668 <__swbuf_r+0x2e>
 80016a4:	2e0a      	cmp	r6, #10
 80016a6:	d1df      	bne.n	8001668 <__swbuf_r+0x2e>
 80016a8:	4621      	mov	r1, r4
 80016aa:	4628      	mov	r0, r5
 80016ac:	f000 fd22 	bl	80020f4 <_fflush_r>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d0d9      	beq.n	8001668 <__swbuf_r+0x2e>
 80016b4:	e7d6      	b.n	8001664 <__swbuf_r+0x2a>
	...

080016b8 <__swsetup_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <__swsetup_r+0xa8>)
 80016bc:	4605      	mov	r5, r0
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	460c      	mov	r4, r1
 80016c2:	b118      	cbz	r0, 80016cc <__swsetup_r+0x14>
 80016c4:	6a03      	ldr	r3, [r0, #32]
 80016c6:	b90b      	cbnz	r3, 80016cc <__swsetup_r+0x14>
 80016c8:	f7ff fece 	bl	8001468 <__sinit>
 80016cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d0:	0719      	lsls	r1, r3, #28
 80016d2:	d422      	bmi.n	800171a <__swsetup_r+0x62>
 80016d4:	06da      	lsls	r2, r3, #27
 80016d6:	d407      	bmi.n	80016e8 <__swsetup_r+0x30>
 80016d8:	2209      	movs	r2, #9
 80016da:	602a      	str	r2, [r5, #0]
 80016dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016e0:	81a3      	strh	r3, [r4, #12]
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	e033      	b.n	8001750 <__swsetup_r+0x98>
 80016e8:	0758      	lsls	r0, r3, #29
 80016ea:	d512      	bpl.n	8001712 <__swsetup_r+0x5a>
 80016ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016ee:	b141      	cbz	r1, 8001702 <__swsetup_r+0x4a>
 80016f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016f4:	4299      	cmp	r1, r3
 80016f6:	d002      	beq.n	80016fe <__swsetup_r+0x46>
 80016f8:	4628      	mov	r0, r5
 80016fa:	f000 f8af 	bl	800185c <_free_r>
 80016fe:	2300      	movs	r3, #0
 8001700:	6363      	str	r3, [r4, #52]	@ 0x34
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	2300      	movs	r3, #0
 800170c:	6063      	str	r3, [r4, #4]
 800170e:	6923      	ldr	r3, [r4, #16]
 8001710:	6023      	str	r3, [r4, #0]
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	81a3      	strh	r3, [r4, #12]
 800171a:	6923      	ldr	r3, [r4, #16]
 800171c:	b94b      	cbnz	r3, 8001732 <__swsetup_r+0x7a>
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001728:	d003      	beq.n	8001732 <__swsetup_r+0x7a>
 800172a:	4621      	mov	r1, r4
 800172c:	4628      	mov	r0, r5
 800172e:	f000 fd2f 	bl	8002190 <__smakebuf_r>
 8001732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001736:	f013 0201 	ands.w	r2, r3, #1
 800173a:	d00a      	beq.n	8001752 <__swsetup_r+0x9a>
 800173c:	2200      	movs	r2, #0
 800173e:	60a2      	str	r2, [r4, #8]
 8001740:	6962      	ldr	r2, [r4, #20]
 8001742:	4252      	negs	r2, r2
 8001744:	61a2      	str	r2, [r4, #24]
 8001746:	6922      	ldr	r2, [r4, #16]
 8001748:	b942      	cbnz	r2, 800175c <__swsetup_r+0xa4>
 800174a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800174e:	d1c5      	bne.n	80016dc <__swsetup_r+0x24>
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	0799      	lsls	r1, r3, #30
 8001754:	bf58      	it	pl
 8001756:	6962      	ldrpl	r2, [r4, #20]
 8001758:	60a2      	str	r2, [r4, #8]
 800175a:	e7f4      	b.n	8001746 <__swsetup_r+0x8e>
 800175c:	2000      	movs	r0, #0
 800175e:	e7f7      	b.n	8001750 <__swsetup_r+0x98>
 8001760:	2000002c 	.word	0x2000002c

08001764 <memset>:
 8001764:	4402      	add	r2, r0
 8001766:	4603      	mov	r3, r0
 8001768:	4293      	cmp	r3, r2
 800176a:	d100      	bne.n	800176e <memset+0xa>
 800176c:	4770      	bx	lr
 800176e:	f803 1b01 	strb.w	r1, [r3], #1
 8001772:	e7f9      	b.n	8001768 <memset+0x4>

08001774 <_close_r>:
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	4d06      	ldr	r5, [pc, #24]	@ (8001790 <_close_r+0x1c>)
 8001778:	2300      	movs	r3, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	f7fe fdcc 	bl	800031c <_close>
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d102      	bne.n	800178e <_close_r+0x1a>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	b103      	cbz	r3, 800178e <_close_r+0x1a>
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	bd38      	pop	{r3, r4, r5, pc}
 8001790:	2000020c 	.word	0x2000020c

08001794 <_lseek_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	4d07      	ldr	r5, [pc, #28]	@ (80017b4 <_lseek_r+0x20>)
 8001798:	4604      	mov	r4, r0
 800179a:	4608      	mov	r0, r1
 800179c:	4611      	mov	r1, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	602a      	str	r2, [r5, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7fe fde1 	bl	800036a <_lseek>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	d102      	bne.n	80017b2 <_lseek_r+0x1e>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	b103      	cbz	r3, 80017b2 <_lseek_r+0x1e>
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	2000020c 	.word	0x2000020c

080017b8 <_read_r>:
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4d07      	ldr	r5, [pc, #28]	@ (80017d8 <_read_r+0x20>)
 80017bc:	4604      	mov	r4, r0
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	602a      	str	r2, [r5, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f7fe fd6a 	bl	80002a0 <_read>
 80017cc:	1c43      	adds	r3, r0, #1
 80017ce:	d102      	bne.n	80017d6 <_read_r+0x1e>
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	b103      	cbz	r3, 80017d6 <_read_r+0x1e>
 80017d4:	6023      	str	r3, [r4, #0]
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
 80017d8:	2000020c 	.word	0x2000020c

080017dc <_write_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4d07      	ldr	r5, [pc, #28]	@ (80017fc <_write_r+0x20>)
 80017e0:	4604      	mov	r4, r0
 80017e2:	4608      	mov	r0, r1
 80017e4:	4611      	mov	r1, r2
 80017e6:	2200      	movs	r2, #0
 80017e8:	602a      	str	r2, [r5, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	f7fe fd76 	bl	80002dc <_write>
 80017f0:	1c43      	adds	r3, r0, #1
 80017f2:	d102      	bne.n	80017fa <_write_r+0x1e>
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	b103      	cbz	r3, 80017fa <_write_r+0x1e>
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	2000020c 	.word	0x2000020c

08001800 <__errno>:
 8001800:	4b01      	ldr	r3, [pc, #4]	@ (8001808 <__errno+0x8>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000002c 	.word	0x2000002c

0800180c <__libc_init_array>:
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	4d0d      	ldr	r5, [pc, #52]	@ (8001844 <__libc_init_array+0x38>)
 8001810:	4c0d      	ldr	r4, [pc, #52]	@ (8001848 <__libc_init_array+0x3c>)
 8001812:	1b64      	subs	r4, r4, r5
 8001814:	10a4      	asrs	r4, r4, #2
 8001816:	2600      	movs	r6, #0
 8001818:	42a6      	cmp	r6, r4
 800181a:	d109      	bne.n	8001830 <__libc_init_array+0x24>
 800181c:	4d0b      	ldr	r5, [pc, #44]	@ (800184c <__libc_init_array+0x40>)
 800181e:	4c0c      	ldr	r4, [pc, #48]	@ (8001850 <__libc_init_array+0x44>)
 8001820:	f000 fd24 	bl	800226c <_init>
 8001824:	1b64      	subs	r4, r4, r5
 8001826:	10a4      	asrs	r4, r4, #2
 8001828:	2600      	movs	r6, #0
 800182a:	42a6      	cmp	r6, r4
 800182c:	d105      	bne.n	800183a <__libc_init_array+0x2e>
 800182e:	bd70      	pop	{r4, r5, r6, pc}
 8001830:	f855 3b04 	ldr.w	r3, [r5], #4
 8001834:	4798      	blx	r3
 8001836:	3601      	adds	r6, #1
 8001838:	e7ee      	b.n	8001818 <__libc_init_array+0xc>
 800183a:	f855 3b04 	ldr.w	r3, [r5], #4
 800183e:	4798      	blx	r3
 8001840:	3601      	adds	r6, #1
 8001842:	e7f2      	b.n	800182a <__libc_init_array+0x1e>
 8001844:	080022f4 	.word	0x080022f4
 8001848:	080022f4 	.word	0x080022f4
 800184c:	080022f4 	.word	0x080022f4
 8001850:	080022f8 	.word	0x080022f8

08001854 <__retarget_lock_init_recursive>:
 8001854:	4770      	bx	lr

08001856 <__retarget_lock_acquire_recursive>:
 8001856:	4770      	bx	lr

08001858 <__retarget_lock_release_recursive>:
 8001858:	4770      	bx	lr
	...

0800185c <_free_r>:
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4605      	mov	r5, r0
 8001860:	2900      	cmp	r1, #0
 8001862:	d041      	beq.n	80018e8 <_free_r+0x8c>
 8001864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001868:	1f0c      	subs	r4, r1, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	bfb8      	it	lt
 800186e:	18e4      	addlt	r4, r4, r3
 8001870:	f000 f8e0 	bl	8001a34 <__malloc_lock>
 8001874:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <_free_r+0x90>)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	b933      	cbnz	r3, 8001888 <_free_r+0x2c>
 800187a:	6063      	str	r3, [r4, #4]
 800187c:	6014      	str	r4, [r2, #0]
 800187e:	4628      	mov	r0, r5
 8001880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001884:	f000 b8dc 	b.w	8001a40 <__malloc_unlock>
 8001888:	42a3      	cmp	r3, r4
 800188a:	d908      	bls.n	800189e <_free_r+0x42>
 800188c:	6820      	ldr	r0, [r4, #0]
 800188e:	1821      	adds	r1, r4, r0
 8001890:	428b      	cmp	r3, r1
 8001892:	bf01      	itttt	eq
 8001894:	6819      	ldreq	r1, [r3, #0]
 8001896:	685b      	ldreq	r3, [r3, #4]
 8001898:	1809      	addeq	r1, r1, r0
 800189a:	6021      	streq	r1, [r4, #0]
 800189c:	e7ed      	b.n	800187a <_free_r+0x1e>
 800189e:	461a      	mov	r2, r3
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	b10b      	cbz	r3, 80018a8 <_free_r+0x4c>
 80018a4:	42a3      	cmp	r3, r4
 80018a6:	d9fa      	bls.n	800189e <_free_r+0x42>
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	1850      	adds	r0, r2, r1
 80018ac:	42a0      	cmp	r0, r4
 80018ae:	d10b      	bne.n	80018c8 <_free_r+0x6c>
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	4401      	add	r1, r0
 80018b4:	1850      	adds	r0, r2, r1
 80018b6:	4283      	cmp	r3, r0
 80018b8:	6011      	str	r1, [r2, #0]
 80018ba:	d1e0      	bne.n	800187e <_free_r+0x22>
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	6053      	str	r3, [r2, #4]
 80018c2:	4408      	add	r0, r1
 80018c4:	6010      	str	r0, [r2, #0]
 80018c6:	e7da      	b.n	800187e <_free_r+0x22>
 80018c8:	d902      	bls.n	80018d0 <_free_r+0x74>
 80018ca:	230c      	movs	r3, #12
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	e7d6      	b.n	800187e <_free_r+0x22>
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	1821      	adds	r1, r4, r0
 80018d4:	428b      	cmp	r3, r1
 80018d6:	bf04      	itt	eq
 80018d8:	6819      	ldreq	r1, [r3, #0]
 80018da:	685b      	ldreq	r3, [r3, #4]
 80018dc:	6063      	str	r3, [r4, #4]
 80018de:	bf04      	itt	eq
 80018e0:	1809      	addeq	r1, r1, r0
 80018e2:	6021      	streq	r1, [r4, #0]
 80018e4:	6054      	str	r4, [r2, #4]
 80018e6:	e7ca      	b.n	800187e <_free_r+0x22>
 80018e8:	bd38      	pop	{r3, r4, r5, pc}
 80018ea:	bf00      	nop
 80018ec:	20000218 	.word	0x20000218

080018f0 <sbrk_aligned>:
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	4e0f      	ldr	r6, [pc, #60]	@ (8001930 <sbrk_aligned+0x40>)
 80018f4:	460c      	mov	r4, r1
 80018f6:	6831      	ldr	r1, [r6, #0]
 80018f8:	4605      	mov	r5, r0
 80018fa:	b911      	cbnz	r1, 8001902 <sbrk_aligned+0x12>
 80018fc:	f000 fca6 	bl	800224c <_sbrk_r>
 8001900:	6030      	str	r0, [r6, #0]
 8001902:	4621      	mov	r1, r4
 8001904:	4628      	mov	r0, r5
 8001906:	f000 fca1 	bl	800224c <_sbrk_r>
 800190a:	1c43      	adds	r3, r0, #1
 800190c:	d103      	bne.n	8001916 <sbrk_aligned+0x26>
 800190e:	f04f 34ff 	mov.w	r4, #4294967295
 8001912:	4620      	mov	r0, r4
 8001914:	bd70      	pop	{r4, r5, r6, pc}
 8001916:	1cc4      	adds	r4, r0, #3
 8001918:	f024 0403 	bic.w	r4, r4, #3
 800191c:	42a0      	cmp	r0, r4
 800191e:	d0f8      	beq.n	8001912 <sbrk_aligned+0x22>
 8001920:	1a21      	subs	r1, r4, r0
 8001922:	4628      	mov	r0, r5
 8001924:	f000 fc92 	bl	800224c <_sbrk_r>
 8001928:	3001      	adds	r0, #1
 800192a:	d1f2      	bne.n	8001912 <sbrk_aligned+0x22>
 800192c:	e7ef      	b.n	800190e <sbrk_aligned+0x1e>
 800192e:	bf00      	nop
 8001930:	20000214 	.word	0x20000214

08001934 <_malloc_r>:
 8001934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001938:	1ccd      	adds	r5, r1, #3
 800193a:	f025 0503 	bic.w	r5, r5, #3
 800193e:	3508      	adds	r5, #8
 8001940:	2d0c      	cmp	r5, #12
 8001942:	bf38      	it	cc
 8001944:	250c      	movcc	r5, #12
 8001946:	2d00      	cmp	r5, #0
 8001948:	4606      	mov	r6, r0
 800194a:	db01      	blt.n	8001950 <_malloc_r+0x1c>
 800194c:	42a9      	cmp	r1, r5
 800194e:	d904      	bls.n	800195a <_malloc_r+0x26>
 8001950:	230c      	movs	r3, #12
 8001952:	6033      	str	r3, [r6, #0]
 8001954:	2000      	movs	r0, #0
 8001956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800195a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a30 <_malloc_r+0xfc>
 800195e:	f000 f869 	bl	8001a34 <__malloc_lock>
 8001962:	f8d8 3000 	ldr.w	r3, [r8]
 8001966:	461c      	mov	r4, r3
 8001968:	bb44      	cbnz	r4, 80019bc <_malloc_r+0x88>
 800196a:	4629      	mov	r1, r5
 800196c:	4630      	mov	r0, r6
 800196e:	f7ff ffbf 	bl	80018f0 <sbrk_aligned>
 8001972:	1c43      	adds	r3, r0, #1
 8001974:	4604      	mov	r4, r0
 8001976:	d158      	bne.n	8001a2a <_malloc_r+0xf6>
 8001978:	f8d8 4000 	ldr.w	r4, [r8]
 800197c:	4627      	mov	r7, r4
 800197e:	2f00      	cmp	r7, #0
 8001980:	d143      	bne.n	8001a0a <_malloc_r+0xd6>
 8001982:	2c00      	cmp	r4, #0
 8001984:	d04b      	beq.n	8001a1e <_malloc_r+0xea>
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	4639      	mov	r1, r7
 800198a:	4630      	mov	r0, r6
 800198c:	eb04 0903 	add.w	r9, r4, r3
 8001990:	f000 fc5c 	bl	800224c <_sbrk_r>
 8001994:	4581      	cmp	r9, r0
 8001996:	d142      	bne.n	8001a1e <_malloc_r+0xea>
 8001998:	6821      	ldr	r1, [r4, #0]
 800199a:	1a6d      	subs	r5, r5, r1
 800199c:	4629      	mov	r1, r5
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff ffa6 	bl	80018f0 <sbrk_aligned>
 80019a4:	3001      	adds	r0, #1
 80019a6:	d03a      	beq.n	8001a1e <_malloc_r+0xea>
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	442b      	add	r3, r5
 80019ac:	6023      	str	r3, [r4, #0]
 80019ae:	f8d8 3000 	ldr.w	r3, [r8]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	bb62      	cbnz	r2, 8001a10 <_malloc_r+0xdc>
 80019b6:	f8c8 7000 	str.w	r7, [r8]
 80019ba:	e00f      	b.n	80019dc <_malloc_r+0xa8>
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	1b52      	subs	r2, r2, r5
 80019c0:	d420      	bmi.n	8001a04 <_malloc_r+0xd0>
 80019c2:	2a0b      	cmp	r2, #11
 80019c4:	d917      	bls.n	80019f6 <_malloc_r+0xc2>
 80019c6:	1961      	adds	r1, r4, r5
 80019c8:	42a3      	cmp	r3, r4
 80019ca:	6025      	str	r5, [r4, #0]
 80019cc:	bf18      	it	ne
 80019ce:	6059      	strne	r1, [r3, #4]
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	bf08      	it	eq
 80019d4:	f8c8 1000 	streq.w	r1, [r8]
 80019d8:	5162      	str	r2, [r4, r5]
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	4630      	mov	r0, r6
 80019de:	f000 f82f 	bl	8001a40 <__malloc_unlock>
 80019e2:	f104 000b 	add.w	r0, r4, #11
 80019e6:	1d23      	adds	r3, r4, #4
 80019e8:	f020 0007 	bic.w	r0, r0, #7
 80019ec:	1ac2      	subs	r2, r0, r3
 80019ee:	bf1c      	itt	ne
 80019f0:	1a1b      	subne	r3, r3, r0
 80019f2:	50a3      	strne	r3, [r4, r2]
 80019f4:	e7af      	b.n	8001956 <_malloc_r+0x22>
 80019f6:	6862      	ldr	r2, [r4, #4]
 80019f8:	42a3      	cmp	r3, r4
 80019fa:	bf0c      	ite	eq
 80019fc:	f8c8 2000 	streq.w	r2, [r8]
 8001a00:	605a      	strne	r2, [r3, #4]
 8001a02:	e7eb      	b.n	80019dc <_malloc_r+0xa8>
 8001a04:	4623      	mov	r3, r4
 8001a06:	6864      	ldr	r4, [r4, #4]
 8001a08:	e7ae      	b.n	8001968 <_malloc_r+0x34>
 8001a0a:	463c      	mov	r4, r7
 8001a0c:	687f      	ldr	r7, [r7, #4]
 8001a0e:	e7b6      	b.n	800197e <_malloc_r+0x4a>
 8001a10:	461a      	mov	r2, r3
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	42a3      	cmp	r3, r4
 8001a16:	d1fb      	bne.n	8001a10 <_malloc_r+0xdc>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6053      	str	r3, [r2, #4]
 8001a1c:	e7de      	b.n	80019dc <_malloc_r+0xa8>
 8001a1e:	230c      	movs	r3, #12
 8001a20:	6033      	str	r3, [r6, #0]
 8001a22:	4630      	mov	r0, r6
 8001a24:	f000 f80c 	bl	8001a40 <__malloc_unlock>
 8001a28:	e794      	b.n	8001954 <_malloc_r+0x20>
 8001a2a:	6005      	str	r5, [r0, #0]
 8001a2c:	e7d6      	b.n	80019dc <_malloc_r+0xa8>
 8001a2e:	bf00      	nop
 8001a30:	20000218 	.word	0x20000218

08001a34 <__malloc_lock>:
 8001a34:	4801      	ldr	r0, [pc, #4]	@ (8001a3c <__malloc_lock+0x8>)
 8001a36:	f7ff bf0e 	b.w	8001856 <__retarget_lock_acquire_recursive>
 8001a3a:	bf00      	nop
 8001a3c:	20000210 	.word	0x20000210

08001a40 <__malloc_unlock>:
 8001a40:	4801      	ldr	r0, [pc, #4]	@ (8001a48 <__malloc_unlock+0x8>)
 8001a42:	f7ff bf09 	b.w	8001858 <__retarget_lock_release_recursive>
 8001a46:	bf00      	nop
 8001a48:	20000210 	.word	0x20000210

08001a4c <__sfputc_r>:
 8001a4c:	6893      	ldr	r3, [r2, #8]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	b410      	push	{r4}
 8001a54:	6093      	str	r3, [r2, #8]
 8001a56:	da08      	bge.n	8001a6a <__sfputc_r+0x1e>
 8001a58:	6994      	ldr	r4, [r2, #24]
 8001a5a:	42a3      	cmp	r3, r4
 8001a5c:	db01      	blt.n	8001a62 <__sfputc_r+0x16>
 8001a5e:	290a      	cmp	r1, #10
 8001a60:	d103      	bne.n	8001a6a <__sfputc_r+0x1e>
 8001a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a66:	f7ff bde8 	b.w	800163a <__swbuf_r>
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	1c58      	adds	r0, r3, #1
 8001a6e:	6010      	str	r0, [r2, #0]
 8001a70:	7019      	strb	r1, [r3, #0]
 8001a72:	4608      	mov	r0, r1
 8001a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <__sfputs_r>:
 8001a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	460f      	mov	r7, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	18d5      	adds	r5, r2, r3
 8001a84:	42ac      	cmp	r4, r5
 8001a86:	d101      	bne.n	8001a8c <__sfputs_r+0x12>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e007      	b.n	8001a9c <__sfputs_r+0x22>
 8001a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a90:	463a      	mov	r2, r7
 8001a92:	4630      	mov	r0, r6
 8001a94:	f7ff ffda 	bl	8001a4c <__sfputc_r>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d1f3      	bne.n	8001a84 <__sfputs_r+0xa>
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001aa0 <_vfiprintf_r>:
 8001aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	b09d      	sub	sp, #116	@ 0x74
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	4698      	mov	r8, r3
 8001aac:	4606      	mov	r6, r0
 8001aae:	b118      	cbz	r0, 8001ab8 <_vfiprintf_r+0x18>
 8001ab0:	6a03      	ldr	r3, [r0, #32]
 8001ab2:	b90b      	cbnz	r3, 8001ab8 <_vfiprintf_r+0x18>
 8001ab4:	f7ff fcd8 	bl	8001468 <__sinit>
 8001ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aba:	07d9      	lsls	r1, r3, #31
 8001abc:	d405      	bmi.n	8001aca <_vfiprintf_r+0x2a>
 8001abe:	89ab      	ldrh	r3, [r5, #12]
 8001ac0:	059a      	lsls	r2, r3, #22
 8001ac2:	d402      	bmi.n	8001aca <_vfiprintf_r+0x2a>
 8001ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ac6:	f7ff fec6 	bl	8001856 <__retarget_lock_acquire_recursive>
 8001aca:	89ab      	ldrh	r3, [r5, #12]
 8001acc:	071b      	lsls	r3, r3, #28
 8001ace:	d501      	bpl.n	8001ad4 <_vfiprintf_r+0x34>
 8001ad0:	692b      	ldr	r3, [r5, #16]
 8001ad2:	b99b      	cbnz	r3, 8001afc <_vfiprintf_r+0x5c>
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f7ff fdee 	bl	80016b8 <__swsetup_r>
 8001adc:	b170      	cbz	r0, 8001afc <_vfiprintf_r+0x5c>
 8001ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ae0:	07dc      	lsls	r4, r3, #31
 8001ae2:	d504      	bpl.n	8001aee <_vfiprintf_r+0x4e>
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	b01d      	add	sp, #116	@ 0x74
 8001aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aee:	89ab      	ldrh	r3, [r5, #12]
 8001af0:	0598      	lsls	r0, r3, #22
 8001af2:	d4f7      	bmi.n	8001ae4 <_vfiprintf_r+0x44>
 8001af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001af6:	f7ff feaf 	bl	8001858 <__retarget_lock_release_recursive>
 8001afa:	e7f3      	b.n	8001ae4 <_vfiprintf_r+0x44>
 8001afc:	2300      	movs	r3, #0
 8001afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b00:	2320      	movs	r3, #32
 8001b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b0a:	2330      	movs	r3, #48	@ 0x30
 8001b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001cbc <_vfiprintf_r+0x21c>
 8001b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b14:	f04f 0901 	mov.w	r9, #1
 8001b18:	4623      	mov	r3, r4
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b20:	b10a      	cbz	r2, 8001b26 <_vfiprintf_r+0x86>
 8001b22:	2a25      	cmp	r2, #37	@ 0x25
 8001b24:	d1f9      	bne.n	8001b1a <_vfiprintf_r+0x7a>
 8001b26:	ebba 0b04 	subs.w	fp, sl, r4
 8001b2a:	d00b      	beq.n	8001b44 <_vfiprintf_r+0xa4>
 8001b2c:	465b      	mov	r3, fp
 8001b2e:	4622      	mov	r2, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff ffa1 	bl	8001a7a <__sfputs_r>
 8001b38:	3001      	adds	r0, #1
 8001b3a:	f000 80a7 	beq.w	8001c8c <_vfiprintf_r+0x1ec>
 8001b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b40:	445a      	add	r2, fp
 8001b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b44:	f89a 3000 	ldrb.w	r3, [sl]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 809f 	beq.w	8001c8c <_vfiprintf_r+0x1ec>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b58:	f10a 0a01 	add.w	sl, sl, #1
 8001b5c:	9304      	str	r3, [sp, #16]
 8001b5e:	9307      	str	r3, [sp, #28]
 8001b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b66:	4654      	mov	r4, sl
 8001b68:	2205      	movs	r2, #5
 8001b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b6e:	4853      	ldr	r0, [pc, #332]	@ (8001cbc <_vfiprintf_r+0x21c>)
 8001b70:	f7fe fb46 	bl	8000200 <memchr>
 8001b74:	9a04      	ldr	r2, [sp, #16]
 8001b76:	b9d8      	cbnz	r0, 8001bb0 <_vfiprintf_r+0x110>
 8001b78:	06d1      	lsls	r1, r2, #27
 8001b7a:	bf44      	itt	mi
 8001b7c:	2320      	movmi	r3, #32
 8001b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b82:	0713      	lsls	r3, r2, #28
 8001b84:	bf44      	itt	mi
 8001b86:	232b      	movmi	r3, #43	@ 0x2b
 8001b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b92:	d015      	beq.n	8001bc0 <_vfiprintf_r+0x120>
 8001b94:	9a07      	ldr	r2, [sp, #28]
 8001b96:	4654      	mov	r4, sl
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f04f 0c0a 	mov.w	ip, #10
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ba4:	3b30      	subs	r3, #48	@ 0x30
 8001ba6:	2b09      	cmp	r3, #9
 8001ba8:	d94b      	bls.n	8001c42 <_vfiprintf_r+0x1a2>
 8001baa:	b1b0      	cbz	r0, 8001bda <_vfiprintf_r+0x13a>
 8001bac:	9207      	str	r2, [sp, #28]
 8001bae:	e014      	b.n	8001bda <_vfiprintf_r+0x13a>
 8001bb0:	eba0 0308 	sub.w	r3, r0, r8
 8001bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	9304      	str	r3, [sp, #16]
 8001bbc:	46a2      	mov	sl, r4
 8001bbe:	e7d2      	b.n	8001b66 <_vfiprintf_r+0xc6>
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	1d19      	adds	r1, r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	9103      	str	r1, [sp, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bfbb      	ittet	lt
 8001bcc:	425b      	neglt	r3, r3
 8001bce:	f042 0202 	orrlt.w	r2, r2, #2
 8001bd2:	9307      	strge	r3, [sp, #28]
 8001bd4:	9307      	strlt	r3, [sp, #28]
 8001bd6:	bfb8      	it	lt
 8001bd8:	9204      	strlt	r2, [sp, #16]
 8001bda:	7823      	ldrb	r3, [r4, #0]
 8001bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bde:	d10a      	bne.n	8001bf6 <_vfiprintf_r+0x156>
 8001be0:	7863      	ldrb	r3, [r4, #1]
 8001be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001be4:	d132      	bne.n	8001c4c <_vfiprintf_r+0x1ac>
 8001be6:	9b03      	ldr	r3, [sp, #12]
 8001be8:	1d1a      	adds	r2, r3, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	9203      	str	r2, [sp, #12]
 8001bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bf2:	3402      	adds	r4, #2
 8001bf4:	9305      	str	r3, [sp, #20]
 8001bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001ccc <_vfiprintf_r+0x22c>
 8001bfa:	7821      	ldrb	r1, [r4, #0]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4650      	mov	r0, sl
 8001c00:	f7fe fafe 	bl	8000200 <memchr>
 8001c04:	b138      	cbz	r0, 8001c16 <_vfiprintf_r+0x176>
 8001c06:	9b04      	ldr	r3, [sp, #16]
 8001c08:	eba0 000a 	sub.w	r0, r0, sl
 8001c0c:	2240      	movs	r2, #64	@ 0x40
 8001c0e:	4082      	lsls	r2, r0
 8001c10:	4313      	orrs	r3, r2
 8001c12:	3401      	adds	r4, #1
 8001c14:	9304      	str	r3, [sp, #16]
 8001c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c1a:	4829      	ldr	r0, [pc, #164]	@ (8001cc0 <_vfiprintf_r+0x220>)
 8001c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c20:	2206      	movs	r2, #6
 8001c22:	f7fe faed 	bl	8000200 <memchr>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d03f      	beq.n	8001caa <_vfiprintf_r+0x20a>
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <_vfiprintf_r+0x224>)
 8001c2c:	bb1b      	cbnz	r3, 8001c76 <_vfiprintf_r+0x1d6>
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	3307      	adds	r3, #7
 8001c32:	f023 0307 	bic.w	r3, r3, #7
 8001c36:	3308      	adds	r3, #8
 8001c38:	9303      	str	r3, [sp, #12]
 8001c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c3c:	443b      	add	r3, r7
 8001c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c40:	e76a      	b.n	8001b18 <_vfiprintf_r+0x78>
 8001c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c46:	460c      	mov	r4, r1
 8001c48:	2001      	movs	r0, #1
 8001c4a:	e7a8      	b.n	8001b9e <_vfiprintf_r+0xfe>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	3401      	adds	r4, #1
 8001c50:	9305      	str	r3, [sp, #20]
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0c0a 	mov.w	ip, #10
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c5e:	3a30      	subs	r2, #48	@ 0x30
 8001c60:	2a09      	cmp	r2, #9
 8001c62:	d903      	bls.n	8001c6c <_vfiprintf_r+0x1cc>
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0c6      	beq.n	8001bf6 <_vfiprintf_r+0x156>
 8001c68:	9105      	str	r1, [sp, #20]
 8001c6a:	e7c4      	b.n	8001bf6 <_vfiprintf_r+0x156>
 8001c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c70:	4604      	mov	r4, r0
 8001c72:	2301      	movs	r3, #1
 8001c74:	e7f0      	b.n	8001c58 <_vfiprintf_r+0x1b8>
 8001c76:	ab03      	add	r3, sp, #12
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	462a      	mov	r2, r5
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <_vfiprintf_r+0x228>)
 8001c7e:	a904      	add	r1, sp, #16
 8001c80:	4630      	mov	r0, r6
 8001c82:	f3af 8000 	nop.w
 8001c86:	4607      	mov	r7, r0
 8001c88:	1c78      	adds	r0, r7, #1
 8001c8a:	d1d6      	bne.n	8001c3a <_vfiprintf_r+0x19a>
 8001c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c8e:	07d9      	lsls	r1, r3, #31
 8001c90:	d405      	bmi.n	8001c9e <_vfiprintf_r+0x1fe>
 8001c92:	89ab      	ldrh	r3, [r5, #12]
 8001c94:	059a      	lsls	r2, r3, #22
 8001c96:	d402      	bmi.n	8001c9e <_vfiprintf_r+0x1fe>
 8001c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c9a:	f7ff fddd 	bl	8001858 <__retarget_lock_release_recursive>
 8001c9e:	89ab      	ldrh	r3, [r5, #12]
 8001ca0:	065b      	lsls	r3, r3, #25
 8001ca2:	f53f af1f 	bmi.w	8001ae4 <_vfiprintf_r+0x44>
 8001ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ca8:	e71e      	b.n	8001ae8 <_vfiprintf_r+0x48>
 8001caa:	ab03      	add	r3, sp, #12
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	462a      	mov	r2, r5
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <_vfiprintf_r+0x228>)
 8001cb2:	a904      	add	r1, sp, #16
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f000 f879 	bl	8001dac <_printf_i>
 8001cba:	e7e4      	b.n	8001c86 <_vfiprintf_r+0x1e6>
 8001cbc:	080022b9 	.word	0x080022b9
 8001cc0:	080022c3 	.word	0x080022c3
 8001cc4:	00000000 	.word	0x00000000
 8001cc8:	08001a7b 	.word	0x08001a7b
 8001ccc:	080022bf 	.word	0x080022bf

08001cd0 <_printf_common>:
 8001cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd4:	4616      	mov	r6, r2
 8001cd6:	4698      	mov	r8, r3
 8001cd8:	688a      	ldr	r2, [r1, #8]
 8001cda:	690b      	ldr	r3, [r1, #16]
 8001cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bfb8      	it	lt
 8001ce4:	4613      	movlt	r3, r2
 8001ce6:	6033      	str	r3, [r6, #0]
 8001ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cec:	4607      	mov	r7, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	b10a      	cbz	r2, 8001cf6 <_printf_common+0x26>
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	6033      	str	r3, [r6, #0]
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	0699      	lsls	r1, r3, #26
 8001cfa:	bf42      	ittt	mi
 8001cfc:	6833      	ldrmi	r3, [r6, #0]
 8001cfe:	3302      	addmi	r3, #2
 8001d00:	6033      	strmi	r3, [r6, #0]
 8001d02:	6825      	ldr	r5, [r4, #0]
 8001d04:	f015 0506 	ands.w	r5, r5, #6
 8001d08:	d106      	bne.n	8001d18 <_printf_common+0x48>
 8001d0a:	f104 0a19 	add.w	sl, r4, #25
 8001d0e:	68e3      	ldr	r3, [r4, #12]
 8001d10:	6832      	ldr	r2, [r6, #0]
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	42ab      	cmp	r3, r5
 8001d16:	dc26      	bgt.n	8001d66 <_printf_common+0x96>
 8001d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	3b00      	subs	r3, #0
 8001d20:	bf18      	it	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	0692      	lsls	r2, r2, #26
 8001d26:	d42b      	bmi.n	8001d80 <_printf_common+0xb0>
 8001d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4638      	mov	r0, r7
 8001d30:	47c8      	blx	r9
 8001d32:	3001      	adds	r0, #1
 8001d34:	d01e      	beq.n	8001d74 <_printf_common+0xa4>
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	6922      	ldr	r2, [r4, #16]
 8001d3a:	f003 0306 	and.w	r3, r3, #6
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf02      	ittt	eq
 8001d42:	68e5      	ldreq	r5, [r4, #12]
 8001d44:	6833      	ldreq	r3, [r6, #0]
 8001d46:	1aed      	subeq	r5, r5, r3
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	bf0c      	ite	eq
 8001d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d50:	2500      	movne	r5, #0
 8001d52:	4293      	cmp	r3, r2
 8001d54:	bfc4      	itt	gt
 8001d56:	1a9b      	subgt	r3, r3, r2
 8001d58:	18ed      	addgt	r5, r5, r3
 8001d5a:	2600      	movs	r6, #0
 8001d5c:	341a      	adds	r4, #26
 8001d5e:	42b5      	cmp	r5, r6
 8001d60:	d11a      	bne.n	8001d98 <_printf_common+0xc8>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e008      	b.n	8001d78 <_printf_common+0xa8>
 8001d66:	2301      	movs	r3, #1
 8001d68:	4652      	mov	r2, sl
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	47c8      	blx	r9
 8001d70:	3001      	adds	r0, #1
 8001d72:	d103      	bne.n	8001d7c <_printf_common+0xac>
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	e7c6      	b.n	8001d0e <_printf_common+0x3e>
 8001d80:	18e1      	adds	r1, r4, r3
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	2030      	movs	r0, #48	@ 0x30
 8001d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d8a:	4422      	add	r2, r4
 8001d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d94:	3302      	adds	r3, #2
 8001d96:	e7c7      	b.n	8001d28 <_printf_common+0x58>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	4638      	mov	r0, r7
 8001da0:	47c8      	blx	r9
 8001da2:	3001      	adds	r0, #1
 8001da4:	d0e6      	beq.n	8001d74 <_printf_common+0xa4>
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7d9      	b.n	8001d5e <_printf_common+0x8e>
	...

08001dac <_printf_i>:
 8001dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001db0:	7e0f      	ldrb	r7, [r1, #24]
 8001db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001db4:	2f78      	cmp	r7, #120	@ 0x78
 8001db6:	4691      	mov	r9, r2
 8001db8:	4680      	mov	r8, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	469a      	mov	sl, r3
 8001dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001dc2:	d807      	bhi.n	8001dd4 <_printf_i+0x28>
 8001dc4:	2f62      	cmp	r7, #98	@ 0x62
 8001dc6:	d80a      	bhi.n	8001dde <_printf_i+0x32>
 8001dc8:	2f00      	cmp	r7, #0
 8001dca:	f000 80d2 	beq.w	8001f72 <_printf_i+0x1c6>
 8001dce:	2f58      	cmp	r7, #88	@ 0x58
 8001dd0:	f000 80b9 	beq.w	8001f46 <_printf_i+0x19a>
 8001dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ddc:	e03a      	b.n	8001e54 <_printf_i+0xa8>
 8001dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001de2:	2b15      	cmp	r3, #21
 8001de4:	d8f6      	bhi.n	8001dd4 <_printf_i+0x28>
 8001de6:	a101      	add	r1, pc, #4	@ (adr r1, 8001dec <_printf_i+0x40>)
 8001de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dec:	08001e45 	.word	0x08001e45
 8001df0:	08001e59 	.word	0x08001e59
 8001df4:	08001dd5 	.word	0x08001dd5
 8001df8:	08001dd5 	.word	0x08001dd5
 8001dfc:	08001dd5 	.word	0x08001dd5
 8001e00:	08001dd5 	.word	0x08001dd5
 8001e04:	08001e59 	.word	0x08001e59
 8001e08:	08001dd5 	.word	0x08001dd5
 8001e0c:	08001dd5 	.word	0x08001dd5
 8001e10:	08001dd5 	.word	0x08001dd5
 8001e14:	08001dd5 	.word	0x08001dd5
 8001e18:	08001f59 	.word	0x08001f59
 8001e1c:	08001e83 	.word	0x08001e83
 8001e20:	08001f13 	.word	0x08001f13
 8001e24:	08001dd5 	.word	0x08001dd5
 8001e28:	08001dd5 	.word	0x08001dd5
 8001e2c:	08001f7b 	.word	0x08001f7b
 8001e30:	08001dd5 	.word	0x08001dd5
 8001e34:	08001e83 	.word	0x08001e83
 8001e38:	08001dd5 	.word	0x08001dd5
 8001e3c:	08001dd5 	.word	0x08001dd5
 8001e40:	08001f1b 	.word	0x08001f1b
 8001e44:	6833      	ldr	r3, [r6, #0]
 8001e46:	1d1a      	adds	r2, r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6032      	str	r2, [r6, #0]
 8001e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e54:	2301      	movs	r3, #1
 8001e56:	e09d      	b.n	8001f94 <_printf_i+0x1e8>
 8001e58:	6833      	ldr	r3, [r6, #0]
 8001e5a:	6820      	ldr	r0, [r4, #0]
 8001e5c:	1d19      	adds	r1, r3, #4
 8001e5e:	6031      	str	r1, [r6, #0]
 8001e60:	0606      	lsls	r6, r0, #24
 8001e62:	d501      	bpl.n	8001e68 <_printf_i+0xbc>
 8001e64:	681d      	ldr	r5, [r3, #0]
 8001e66:	e003      	b.n	8001e70 <_printf_i+0xc4>
 8001e68:	0645      	lsls	r5, r0, #25
 8001e6a:	d5fb      	bpl.n	8001e64 <_printf_i+0xb8>
 8001e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	da03      	bge.n	8001e7c <_printf_i+0xd0>
 8001e74:	232d      	movs	r3, #45	@ 0x2d
 8001e76:	426d      	negs	r5, r5
 8001e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e7c:	4859      	ldr	r0, [pc, #356]	@ (8001fe4 <_printf_i+0x238>)
 8001e7e:	230a      	movs	r3, #10
 8001e80:	e011      	b.n	8001ea6 <_printf_i+0xfa>
 8001e82:	6821      	ldr	r1, [r4, #0]
 8001e84:	6833      	ldr	r3, [r6, #0]
 8001e86:	0608      	lsls	r0, r1, #24
 8001e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e8c:	d402      	bmi.n	8001e94 <_printf_i+0xe8>
 8001e8e:	0649      	lsls	r1, r1, #25
 8001e90:	bf48      	it	mi
 8001e92:	b2ad      	uxthmi	r5, r5
 8001e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e96:	4853      	ldr	r0, [pc, #332]	@ (8001fe4 <_printf_i+0x238>)
 8001e98:	6033      	str	r3, [r6, #0]
 8001e9a:	bf14      	ite	ne
 8001e9c:	230a      	movne	r3, #10
 8001e9e:	2308      	moveq	r3, #8
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ea6:	6866      	ldr	r6, [r4, #4]
 8001ea8:	60a6      	str	r6, [r4, #8]
 8001eaa:	2e00      	cmp	r6, #0
 8001eac:	bfa2      	ittt	ge
 8001eae:	6821      	ldrge	r1, [r4, #0]
 8001eb0:	f021 0104 	bicge.w	r1, r1, #4
 8001eb4:	6021      	strge	r1, [r4, #0]
 8001eb6:	b90d      	cbnz	r5, 8001ebc <_printf_i+0x110>
 8001eb8:	2e00      	cmp	r6, #0
 8001eba:	d04b      	beq.n	8001f54 <_printf_i+0x1a8>
 8001ebc:	4616      	mov	r6, r2
 8001ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8001ec6:	5dc7      	ldrb	r7, [r0, r7]
 8001ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ecc:	462f      	mov	r7, r5
 8001ece:	42bb      	cmp	r3, r7
 8001ed0:	460d      	mov	r5, r1
 8001ed2:	d9f4      	bls.n	8001ebe <_printf_i+0x112>
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d10b      	bne.n	8001ef0 <_printf_i+0x144>
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	07df      	lsls	r7, r3, #31
 8001edc:	d508      	bpl.n	8001ef0 <_printf_i+0x144>
 8001ede:	6923      	ldr	r3, [r4, #16]
 8001ee0:	6861      	ldr	r1, [r4, #4]
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	bfde      	ittt	le
 8001ee6:	2330      	movle	r3, #48	@ 0x30
 8001ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ef0:	1b92      	subs	r2, r2, r6
 8001ef2:	6122      	str	r2, [r4, #16]
 8001ef4:	f8cd a000 	str.w	sl, [sp]
 8001ef8:	464b      	mov	r3, r9
 8001efa:	aa03      	add	r2, sp, #12
 8001efc:	4621      	mov	r1, r4
 8001efe:	4640      	mov	r0, r8
 8001f00:	f7ff fee6 	bl	8001cd0 <_printf_common>
 8001f04:	3001      	adds	r0, #1
 8001f06:	d14a      	bne.n	8001f9e <_printf_i+0x1f2>
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	b004      	add	sp, #16
 8001f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	4833      	ldr	r0, [pc, #204]	@ (8001fe8 <_printf_i+0x23c>)
 8001f1c:	2778      	movs	r7, #120	@ 0x78
 8001f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	6831      	ldr	r1, [r6, #0]
 8001f26:	061f      	lsls	r7, r3, #24
 8001f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f2c:	d402      	bmi.n	8001f34 <_printf_i+0x188>
 8001f2e:	065f      	lsls	r7, r3, #25
 8001f30:	bf48      	it	mi
 8001f32:	b2ad      	uxthmi	r5, r5
 8001f34:	6031      	str	r1, [r6, #0]
 8001f36:	07d9      	lsls	r1, r3, #31
 8001f38:	bf44      	itt	mi
 8001f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8001f3e:	6023      	strmi	r3, [r4, #0]
 8001f40:	b11d      	cbz	r5, 8001f4a <_printf_i+0x19e>
 8001f42:	2310      	movs	r3, #16
 8001f44:	e7ac      	b.n	8001ea0 <_printf_i+0xf4>
 8001f46:	4827      	ldr	r0, [pc, #156]	@ (8001fe4 <_printf_i+0x238>)
 8001f48:	e7e9      	b.n	8001f1e <_printf_i+0x172>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	f023 0320 	bic.w	r3, r3, #32
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	e7f6      	b.n	8001f42 <_printf_i+0x196>
 8001f54:	4616      	mov	r6, r2
 8001f56:	e7bd      	b.n	8001ed4 <_printf_i+0x128>
 8001f58:	6833      	ldr	r3, [r6, #0]
 8001f5a:	6825      	ldr	r5, [r4, #0]
 8001f5c:	6961      	ldr	r1, [r4, #20]
 8001f5e:	1d18      	adds	r0, r3, #4
 8001f60:	6030      	str	r0, [r6, #0]
 8001f62:	062e      	lsls	r6, r5, #24
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	d501      	bpl.n	8001f6c <_printf_i+0x1c0>
 8001f68:	6019      	str	r1, [r3, #0]
 8001f6a:	e002      	b.n	8001f72 <_printf_i+0x1c6>
 8001f6c:	0668      	lsls	r0, r5, #25
 8001f6e:	d5fb      	bpl.n	8001f68 <_printf_i+0x1bc>
 8001f70:	8019      	strh	r1, [r3, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	6123      	str	r3, [r4, #16]
 8001f76:	4616      	mov	r6, r2
 8001f78:	e7bc      	b.n	8001ef4 <_printf_i+0x148>
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	1d1a      	adds	r2, r3, #4
 8001f7e:	6032      	str	r2, [r6, #0]
 8001f80:	681e      	ldr	r6, [r3, #0]
 8001f82:	6862      	ldr	r2, [r4, #4]
 8001f84:	2100      	movs	r1, #0
 8001f86:	4630      	mov	r0, r6
 8001f88:	f7fe f93a 	bl	8000200 <memchr>
 8001f8c:	b108      	cbz	r0, 8001f92 <_printf_i+0x1e6>
 8001f8e:	1b80      	subs	r0, r0, r6
 8001f90:	6060      	str	r0, [r4, #4]
 8001f92:	6863      	ldr	r3, [r4, #4]
 8001f94:	6123      	str	r3, [r4, #16]
 8001f96:	2300      	movs	r3, #0
 8001f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f9c:	e7aa      	b.n	8001ef4 <_printf_i+0x148>
 8001f9e:	6923      	ldr	r3, [r4, #16]
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	4640      	mov	r0, r8
 8001fa6:	47d0      	blx	sl
 8001fa8:	3001      	adds	r0, #1
 8001faa:	d0ad      	beq.n	8001f08 <_printf_i+0x15c>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	079b      	lsls	r3, r3, #30
 8001fb0:	d413      	bmi.n	8001fda <_printf_i+0x22e>
 8001fb2:	68e0      	ldr	r0, [r4, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4298      	cmp	r0, r3
 8001fb8:	bfb8      	it	lt
 8001fba:	4618      	movlt	r0, r3
 8001fbc:	e7a6      	b.n	8001f0c <_printf_i+0x160>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	4632      	mov	r2, r6
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	4640      	mov	r0, r8
 8001fc6:	47d0      	blx	sl
 8001fc8:	3001      	adds	r0, #1
 8001fca:	d09d      	beq.n	8001f08 <_printf_i+0x15c>
 8001fcc:	3501      	adds	r5, #1
 8001fce:	68e3      	ldr	r3, [r4, #12]
 8001fd0:	9903      	ldr	r1, [sp, #12]
 8001fd2:	1a5b      	subs	r3, r3, r1
 8001fd4:	42ab      	cmp	r3, r5
 8001fd6:	dcf2      	bgt.n	8001fbe <_printf_i+0x212>
 8001fd8:	e7eb      	b.n	8001fb2 <_printf_i+0x206>
 8001fda:	2500      	movs	r5, #0
 8001fdc:	f104 0619 	add.w	r6, r4, #25
 8001fe0:	e7f5      	b.n	8001fce <_printf_i+0x222>
 8001fe2:	bf00      	nop
 8001fe4:	080022ca 	.word	0x080022ca
 8001fe8:	080022db 	.word	0x080022db

08001fec <__sflush_r>:
 8001fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff4:	0716      	lsls	r6, r2, #28
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	d454      	bmi.n	80020a6 <__sflush_r+0xba>
 8001ffc:	684b      	ldr	r3, [r1, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dc02      	bgt.n	8002008 <__sflush_r+0x1c>
 8002002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	dd48      	ble.n	800209a <__sflush_r+0xae>
 8002008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800200a:	2e00      	cmp	r6, #0
 800200c:	d045      	beq.n	800209a <__sflush_r+0xae>
 800200e:	2300      	movs	r3, #0
 8002010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002014:	682f      	ldr	r7, [r5, #0]
 8002016:	6a21      	ldr	r1, [r4, #32]
 8002018:	602b      	str	r3, [r5, #0]
 800201a:	d030      	beq.n	800207e <__sflush_r+0x92>
 800201c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800201e:	89a3      	ldrh	r3, [r4, #12]
 8002020:	0759      	lsls	r1, r3, #29
 8002022:	d505      	bpl.n	8002030 <__sflush_r+0x44>
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	1ad2      	subs	r2, r2, r3
 8002028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800202a:	b10b      	cbz	r3, 8002030 <__sflush_r+0x44>
 800202c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002034:	6a21      	ldr	r1, [r4, #32]
 8002036:	4628      	mov	r0, r5
 8002038:	47b0      	blx	r6
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	d106      	bne.n	800204e <__sflush_r+0x62>
 8002040:	6829      	ldr	r1, [r5, #0]
 8002042:	291d      	cmp	r1, #29
 8002044:	d82b      	bhi.n	800209e <__sflush_r+0xb2>
 8002046:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <__sflush_r+0x104>)
 8002048:	410a      	asrs	r2, r1
 800204a:	07d6      	lsls	r6, r2, #31
 800204c:	d427      	bmi.n	800209e <__sflush_r+0xb2>
 800204e:	2200      	movs	r2, #0
 8002050:	6062      	str	r2, [r4, #4]
 8002052:	04d9      	lsls	r1, r3, #19
 8002054:	6922      	ldr	r2, [r4, #16]
 8002056:	6022      	str	r2, [r4, #0]
 8002058:	d504      	bpl.n	8002064 <__sflush_r+0x78>
 800205a:	1c42      	adds	r2, r0, #1
 800205c:	d101      	bne.n	8002062 <__sflush_r+0x76>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b903      	cbnz	r3, 8002064 <__sflush_r+0x78>
 8002062:	6560      	str	r0, [r4, #84]	@ 0x54
 8002064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002066:	602f      	str	r7, [r5, #0]
 8002068:	b1b9      	cbz	r1, 800209a <__sflush_r+0xae>
 800206a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800206e:	4299      	cmp	r1, r3
 8002070:	d002      	beq.n	8002078 <__sflush_r+0x8c>
 8002072:	4628      	mov	r0, r5
 8002074:	f7ff fbf2 	bl	800185c <_free_r>
 8002078:	2300      	movs	r3, #0
 800207a:	6363      	str	r3, [r4, #52]	@ 0x34
 800207c:	e00d      	b.n	800209a <__sflush_r+0xae>
 800207e:	2301      	movs	r3, #1
 8002080:	4628      	mov	r0, r5
 8002082:	47b0      	blx	r6
 8002084:	4602      	mov	r2, r0
 8002086:	1c50      	adds	r0, r2, #1
 8002088:	d1c9      	bne.n	800201e <__sflush_r+0x32>
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0c6      	beq.n	800201e <__sflush_r+0x32>
 8002090:	2b1d      	cmp	r3, #29
 8002092:	d001      	beq.n	8002098 <__sflush_r+0xac>
 8002094:	2b16      	cmp	r3, #22
 8002096:	d11e      	bne.n	80020d6 <__sflush_r+0xea>
 8002098:	602f      	str	r7, [r5, #0]
 800209a:	2000      	movs	r0, #0
 800209c:	e022      	b.n	80020e4 <__sflush_r+0xf8>
 800209e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	e01b      	b.n	80020de <__sflush_r+0xf2>
 80020a6:	690f      	ldr	r7, [r1, #16]
 80020a8:	2f00      	cmp	r7, #0
 80020aa:	d0f6      	beq.n	800209a <__sflush_r+0xae>
 80020ac:	0793      	lsls	r3, r2, #30
 80020ae:	680e      	ldr	r6, [r1, #0]
 80020b0:	bf08      	it	eq
 80020b2:	694b      	ldreq	r3, [r1, #20]
 80020b4:	600f      	str	r7, [r1, #0]
 80020b6:	bf18      	it	ne
 80020b8:	2300      	movne	r3, #0
 80020ba:	eba6 0807 	sub.w	r8, r6, r7
 80020be:	608b      	str	r3, [r1, #8]
 80020c0:	f1b8 0f00 	cmp.w	r8, #0
 80020c4:	dde9      	ble.n	800209a <__sflush_r+0xae>
 80020c6:	6a21      	ldr	r1, [r4, #32]
 80020c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80020ca:	4643      	mov	r3, r8
 80020cc:	463a      	mov	r2, r7
 80020ce:	4628      	mov	r0, r5
 80020d0:	47b0      	blx	r6
 80020d2:	2800      	cmp	r0, #0
 80020d4:	dc08      	bgt.n	80020e8 <__sflush_r+0xfc>
 80020d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020de:	81a3      	strh	r3, [r4, #12]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e8:	4407      	add	r7, r0
 80020ea:	eba8 0800 	sub.w	r8, r8, r0
 80020ee:	e7e7      	b.n	80020c0 <__sflush_r+0xd4>
 80020f0:	dfbffffe 	.word	0xdfbffffe

080020f4 <_fflush_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	690b      	ldr	r3, [r1, #16]
 80020f8:	4605      	mov	r5, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	b913      	cbnz	r3, 8002104 <_fflush_r+0x10>
 80020fe:	2500      	movs	r5, #0
 8002100:	4628      	mov	r0, r5
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	b118      	cbz	r0, 800210e <_fflush_r+0x1a>
 8002106:	6a03      	ldr	r3, [r0, #32]
 8002108:	b90b      	cbnz	r3, 800210e <_fflush_r+0x1a>
 800210a:	f7ff f9ad 	bl	8001468 <__sinit>
 800210e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f3      	beq.n	80020fe <_fflush_r+0xa>
 8002116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002118:	07d0      	lsls	r0, r2, #31
 800211a:	d404      	bmi.n	8002126 <_fflush_r+0x32>
 800211c:	0599      	lsls	r1, r3, #22
 800211e:	d402      	bmi.n	8002126 <_fflush_r+0x32>
 8002120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002122:	f7ff fb98 	bl	8001856 <__retarget_lock_acquire_recursive>
 8002126:	4628      	mov	r0, r5
 8002128:	4621      	mov	r1, r4
 800212a:	f7ff ff5f 	bl	8001fec <__sflush_r>
 800212e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002130:	07da      	lsls	r2, r3, #31
 8002132:	4605      	mov	r5, r0
 8002134:	d4e4      	bmi.n	8002100 <_fflush_r+0xc>
 8002136:	89a3      	ldrh	r3, [r4, #12]
 8002138:	059b      	lsls	r3, r3, #22
 800213a:	d4e1      	bmi.n	8002100 <_fflush_r+0xc>
 800213c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800213e:	f7ff fb8b 	bl	8001858 <__retarget_lock_release_recursive>
 8002142:	e7dd      	b.n	8002100 <_fflush_r+0xc>

08002144 <__swhatbuf_r>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	460c      	mov	r4, r1
 8002148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214c:	2900      	cmp	r1, #0
 800214e:	b096      	sub	sp, #88	@ 0x58
 8002150:	4615      	mov	r5, r2
 8002152:	461e      	mov	r6, r3
 8002154:	da0d      	bge.n	8002172 <__swhatbuf_r+0x2e>
 8002156:	89a3      	ldrh	r3, [r4, #12]
 8002158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	bf14      	ite	ne
 8002162:	2340      	movne	r3, #64	@ 0x40
 8002164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002168:	2000      	movs	r0, #0
 800216a:	6031      	str	r1, [r6, #0]
 800216c:	602b      	str	r3, [r5, #0]
 800216e:	b016      	add	sp, #88	@ 0x58
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	466a      	mov	r2, sp
 8002174:	f000 f848 	bl	8002208 <_fstat_r>
 8002178:	2800      	cmp	r0, #0
 800217a:	dbec      	blt.n	8002156 <__swhatbuf_r+0x12>
 800217c:	9901      	ldr	r1, [sp, #4]
 800217e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002186:	4259      	negs	r1, r3
 8002188:	4159      	adcs	r1, r3
 800218a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800218e:	e7eb      	b.n	8002168 <__swhatbuf_r+0x24>

08002190 <__smakebuf_r>:
 8002190:	898b      	ldrh	r3, [r1, #12]
 8002192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002194:	079d      	lsls	r5, r3, #30
 8002196:	4606      	mov	r6, r0
 8002198:	460c      	mov	r4, r1
 800219a:	d507      	bpl.n	80021ac <__smakebuf_r+0x1c>
 800219c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	6123      	str	r3, [r4, #16]
 80021a4:	2301      	movs	r3, #1
 80021a6:	6163      	str	r3, [r4, #20]
 80021a8:	b003      	add	sp, #12
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ac:	ab01      	add	r3, sp, #4
 80021ae:	466a      	mov	r2, sp
 80021b0:	f7ff ffc8 	bl	8002144 <__swhatbuf_r>
 80021b4:	9f00      	ldr	r7, [sp, #0]
 80021b6:	4605      	mov	r5, r0
 80021b8:	4639      	mov	r1, r7
 80021ba:	4630      	mov	r0, r6
 80021bc:	f7ff fbba 	bl	8001934 <_malloc_r>
 80021c0:	b948      	cbnz	r0, 80021d6 <__smakebuf_r+0x46>
 80021c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c6:	059a      	lsls	r2, r3, #22
 80021c8:	d4ee      	bmi.n	80021a8 <__smakebuf_r+0x18>
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	81a3      	strh	r3, [r4, #12]
 80021d4:	e7e2      	b.n	800219c <__smakebuf_r+0xc>
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	6020      	str	r0, [r4, #0]
 80021da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021de:	81a3      	strh	r3, [r4, #12]
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80021e6:	b15b      	cbz	r3, 8002200 <__smakebuf_r+0x70>
 80021e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ec:	4630      	mov	r0, r6
 80021ee:	f000 f81d 	bl	800222c <_isatty_r>
 80021f2:	b128      	cbz	r0, 8002200 <__smakebuf_r+0x70>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	81a3      	strh	r3, [r4, #12]
 8002200:	89a3      	ldrh	r3, [r4, #12]
 8002202:	431d      	orrs	r5, r3
 8002204:	81a5      	strh	r5, [r4, #12]
 8002206:	e7cf      	b.n	80021a8 <__smakebuf_r+0x18>

08002208 <_fstat_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4d07      	ldr	r5, [pc, #28]	@ (8002228 <_fstat_r+0x20>)
 800220c:	2300      	movs	r3, #0
 800220e:	4604      	mov	r4, r0
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	602b      	str	r3, [r5, #0]
 8002216:	f7fe f88d 	bl	8000334 <_fstat>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	d102      	bne.n	8002224 <_fstat_r+0x1c>
 800221e:	682b      	ldr	r3, [r5, #0]
 8002220:	b103      	cbz	r3, 8002224 <_fstat_r+0x1c>
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	bd38      	pop	{r3, r4, r5, pc}
 8002226:	bf00      	nop
 8002228:	2000020c 	.word	0x2000020c

0800222c <_isatty_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4d06      	ldr	r5, [pc, #24]	@ (8002248 <_isatty_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7fe f88c 	bl	8000354 <_isatty>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_isatty_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_isatty_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	2000020c 	.word	0x2000020c

0800224c <_sbrk_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4d06      	ldr	r5, [pc, #24]	@ (8002268 <_sbrk_r+0x1c>)
 8002250:	2300      	movs	r3, #0
 8002252:	4604      	mov	r4, r0
 8002254:	4608      	mov	r0, r1
 8002256:	602b      	str	r3, [r5, #0]
 8002258:	f7fe f894 	bl	8000384 <_sbrk>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_sbrk_r+0x1a>
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	b103      	cbz	r3, 8002266 <_sbrk_r+0x1a>
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	2000020c 	.word	0x2000020c

0800226c <_init>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr

08002278 <_fini>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	bf00      	nop
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr
