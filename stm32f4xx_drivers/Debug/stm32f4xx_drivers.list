
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c54  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dfc  08000dfc  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dfc  08000dfc  00002030  2**0
                  CONTENTS
  4 .ARM          00000008  08000dfc  08000dfc  00001dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e04  08000e04  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e04  08000e04  00001e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e08  08000e08  00001e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08000e0c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          0000003c  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a78  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000728  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00004200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000152  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028dc  00000000  00000000  00004522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002509  00000000  00000000  00006dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a3e4  00000000  00000000  00009307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000136eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000680  00000000  00000000  00013730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00013db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000030 	.word	0x20000030
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000de4 	.word	0x08000de4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000034 	.word	0x20000034
 80001e4:	08000de4 	.word	0x08000de4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:

#define I2C_SCL_PIN		8
#define I2C_SDA_PIN		7

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <I2C1_GPIOInits+0x40>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000232:	2301      	movs	r3, #1
 8000234:	72fb      	strb	r3, [r7, #11]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PULLUP;
 8000236:	2301      	movs	r3, #1
 8000238:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000242:	2308      	movs	r3, #8
 8000244:	723b      	strb	r3, [r7, #8]
	gpio_init(&I2CPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f97f 	bl	800054c <gpio_init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800024e:	2307      	movs	r3, #7
 8000250:	723b      	strb	r3, [r7, #8]

	gpio_init(&I2CPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f979 	bl	800054c <gpio_init>


}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020400 	.word	0x40020400

08000268 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <I2C1_Inits+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <I2C1_Inits+0x30>)
 8000270:	60da      	str	r2, [r3, #12]
	I2C1Handle.i2c_config.I2C_Ack = I2C_ACK_ENABLE;
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <I2C1_Inits+0x2c>)
 8000274:	2201      	movs	r2, #1
 8000276:	705a      	strb	r2, [r3, #1]
	I2C1Handle.i2c_config.DeviceAddress = MY_ADDR;
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <I2C1_Inits+0x2c>)
 800027a:	2261      	movs	r2, #97	@ 0x61
 800027c:	701a      	strb	r2, [r3, #0]
	I2C1Handle.i2c_config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800027e:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <I2C1_Inits+0x2c>)
 8000280:	2200      	movs	r2, #0
 8000282:	721a      	strb	r2, [r3, #8]
	I2C1Handle.i2c_config.I2C_SCLK_Speed = I2C_SPEED_SM_80K;
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <I2C1_Inits+0x2c>)
 8000286:	4a05      	ldr	r2, [pc, #20]	@ (800029c <I2C1_Inits+0x34>)
 8000288:	605a      	str	r2, [r3, #4]

	i2c_init(&I2C1Handle);
 800028a:	4802      	ldr	r0, [pc, #8]	@ (8000294 <I2C1_Inits+0x2c>)
 800028c:	f000 fb20 	bl	80008d0 <i2c_init>

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000004c 	.word	0x2000004c
 8000298:	40005400 	.word	0x40005400
 800029c:	00013880 	.word	0x00013880

080002a0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002a6:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <GPIO_ButtonInit+0x2c>)
 80002a8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	733b      	strb	r3, [r7, #12]

	gpio_init(&GPIOBtn);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f945 	bl	800054c <gpio_init>

}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000

080002d0 <main>:


int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002d6:	f7ff ffe3 	bl	80002a0 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002da:	f7ff ffa3 	bl	8000224 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002de:	f7ff ffc3 	bl	8000268 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <main+0x48>)
 80002e6:	f000 fad7 	bl	8000898 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! gpio_read_inp_pin(GPIOA,GPIO_PIN_NO_0) );
 80002ea:	bf00      	nop
 80002ec:	2100      	movs	r1, #0
 80002ee:	480b      	ldr	r0, [pc, #44]	@ (800031c <main+0x4c>)
 80002f0:	f000 faba 	bl	8000868 <gpio_read_inp_pin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f8      	beq.n	80002ec <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002fa:	f7ff ff7d 	bl	80001f8 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,tx_data,strlen((char*)tx_data),SLAVE_ADDR,0);
 80002fe:	4808      	ldr	r0, [pc, #32]	@ (8000320 <main+0x50>)
 8000300:	f7ff ff72 	bl	80001e8 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	b2da      	uxtb	r2, r3
 8000308:	2300      	movs	r3, #0
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2368      	movs	r3, #104	@ 0x68
 800030e:	4904      	ldr	r1, [pc, #16]	@ (8000320 <main+0x50>)
 8000310:	4804      	ldr	r0, [pc, #16]	@ (8000324 <main+0x54>)
 8000312:	f000 fb93 	bl	8000a3c <I2C_MasterSendData>
		while( ! gpio_read_inp_pin(GPIOA,GPIO_PIN_NO_0) );
 8000316:	e7e8      	b.n	80002ea <main+0x1a>
 8000318:	40005400 	.word	0x40005400
 800031c:	40020000 	.word	0x40020000
 8000320:	20000000 	.word	0x20000000
 8000324:	2000004c 	.word	0x2000004c

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 fd21 	bl	8000d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ffb9 	bl	80002d0 <main>

0800035e <LoopForever>:

LoopForever:
    b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800036c:	08000e0c 	.word	0x08000e0c
  ldr r2, =_sbss
 8000370:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000374:	2000006c 	.word	0x2000006c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <GPIO_PeriClk_Control>:
 *      Author: Ibrahim
 */
#include "stm32f407xx_gpio_driver.h"

void GPIO_PeriClk_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d162      	bne.n	8000454 <GPIO_PeriClk_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a64      	ldr	r2, [pc, #400]	@ (8000524 <GPIO_PeriClk_Control+0x1a8>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClk_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000396:	4b64      	ldr	r3, [pc, #400]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a63      	ldr	r2, [pc, #396]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003a2:	e0b9      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a61      	ldr	r2, [pc, #388]	@ (800052c <GPIO_PeriClk_Control+0x1b0>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClk_Control+0x3e>
			GPIOB_PCLK_EN();
 80003ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a5d      	ldr	r2, [pc, #372]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b8:	e0ae      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000530 <GPIO_PeriClk_Control+0x1b4>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClk_Control+0x54>
			GPIOC_PCLK_EN();
 80003c2:	4b59      	ldr	r3, [pc, #356]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a58      	ldr	r2, [pc, #352]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ce:	e0a3      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a58      	ldr	r2, [pc, #352]	@ (8000534 <GPIO_PeriClk_Control+0x1b8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClk_Control+0x6a>
			GPIOD_PCLK_EN();
 80003d8:	4b53      	ldr	r3, [pc, #332]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a52      	ldr	r2, [pc, #328]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	e098      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a53      	ldr	r2, [pc, #332]	@ (8000538 <GPIO_PeriClk_Control+0x1bc>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClk_Control+0x80>
			GPIOE_PCLK_EN();
 80003ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e08d      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a4f      	ldr	r2, [pc, #316]	@ (800053c <GPIO_PeriClk_Control+0x1c0>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClk_Control+0x96>
			GPIOF_PCLK_EN();
 8000404:	4b48      	ldr	r3, [pc, #288]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a47      	ldr	r2, [pc, #284]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	e082      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a4a      	ldr	r2, [pc, #296]	@ (8000540 <GPIO_PeriClk_Control+0x1c4>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClk_Control+0xac>
			GPIOG_PCLK_EN();
 800041a:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a42      	ldr	r2, [pc, #264]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000426:	e077      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a46      	ldr	r2, [pc, #280]	@ (8000544 <GPIO_PeriClk_Control+0x1c8>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClk_Control+0xc2>
			GPIOH_PCLK_EN();
 8000430:	4b3d      	ldr	r3, [pc, #244]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a3c      	ldr	r2, [pc, #240]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e06c      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a41      	ldr	r2, [pc, #260]	@ (8000548 <GPIO_PeriClk_Control+0x1cc>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d168      	bne.n	8000518 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_EN();
 8000446:	4b38      	ldr	r3, [pc, #224]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800044c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e061      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		if(pGPIOx == GPIOA)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a33      	ldr	r2, [pc, #204]	@ (8000524 <GPIO_PeriClk_Control+0x1a8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClk_Control+0xee>
			GPIOA_PCLK_DI();
 800045c:	4b32      	ldr	r3, [pc, #200]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000462:	f023 0301 	bic.w	r3, r3, #1
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e056      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOB)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <GPIO_PeriClk_Control+0x1b0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClk_Control+0x104>
			GPIOB_PCLK_DI();
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a2c      	ldr	r2, [pc, #176]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000478:	f023 0302 	bic.w	r3, r3, #2
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e04b      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOC)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a2b      	ldr	r2, [pc, #172]	@ (8000530 <GPIO_PeriClk_Control+0x1b4>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClk_Control+0x11a>
			GPIOC_PCLK_DI();
 8000488:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800048e:	f023 0304 	bic.w	r3, r3, #4
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	e040      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOD)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <GPIO_PeriClk_Control+0x1b8>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClk_Control+0x130>
			GPIOD_PCLK_DI();
 800049e:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004a4:	f023 0308 	bic.w	r3, r3, #8
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004aa:	e035      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOE)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a22      	ldr	r2, [pc, #136]	@ (8000538 <GPIO_PeriClk_Control+0x1bc>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClk_Control+0x146>
			GPIOE_PCLK_DI();
 80004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004ba:	f023 0310 	bic.w	r3, r3, #16
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c0:	e02a      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOF)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a1d      	ldr	r2, [pc, #116]	@ (800053c <GPIO_PeriClk_Control+0x1c0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClk_Control+0x15c>
			GPIOF_PCLK_DI();
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004d0:	f023 0320 	bic.w	r3, r3, #32
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d6:	e01f      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOG)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <GPIO_PeriClk_Control+0x1c4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClk_Control+0x172>
			GPIOG_PCLK_DI();
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	e014      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOH)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <GPIO_PeriClk_Control+0x1c8>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClk_Control+0x188>
			GPIOH_PCLK_DI();
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 80004fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000502:	e009      	b.n	8000518 <GPIO_PeriClk_Control+0x19c>
		}else if (pGPIOx == GPIOI)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <GPIO_PeriClk_Control+0x1cc>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d105      	bne.n	8000518 <GPIO_PeriClk_Control+0x19c>
			GPIOI_PCLK_DI();
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <GPIO_PeriClk_Control+0x1ac>)
 8000512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40020000 	.word	0x40020000
 8000528:	40023800 	.word	0x40023800
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40021000 	.word	0x40021000
 800053c:	40021400 	.word	0x40021400
 8000540:	40021800 	.word	0x40021800
 8000544:	40021c00 	.word	0x40021c00
 8000548:	40022000 	.word	0x40022000

0800054c <gpio_init>:

void gpio_init(GPIO_Handle_t *pGPIO_Handle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint8_t mode;

	//Enable peripheral clock
	GPIO_PeriClk_Control(pGPIO_Handle->pGPIOx, ENABLE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff0e 	bl	800037c <GPIO_PeriClk_Control>

	//1. Configuring mode
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	617b      	str	r3, [r7, #20]
	mode=temp;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	74fb      	strb	r3, [r7, #19]

	//Clear the MODER bits (Bits cleared = input mode)
	pGPIO_Handle->pGPIOx->MODER &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]

	if(mode <= GPIO_MODE_ANALOG)
 8000588:	7cfb      	ldrb	r3, [r7, #19]
 800058a:	2b03      	cmp	r3, #3
 800058c:	f200 809d 	bhi.w	80006ca <gpio_init+0x17e>
	{
		pGPIO_Handle->pGPIOx->MODER |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	409a      	lsls	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	601a      	str	r2, [r3, #0]

		//Configure output type and speed (First doing speed)
		temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	799b      	ldrb	r3, [r3, #6]
 80005ac:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->OSPEEDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]
		pGPIO_Handle->pGPIOx->OSPEEDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6899      	ldr	r1, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	409a      	lsls	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	609a      	str	r2, [r3, #8]

		//Configuring op type
		temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	79db      	ldrb	r3, [r3, #7]
 80005e8:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->OTYPER &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	4619      	mov	r1, r3
 80005f6:	2301      	movs	r3, #1
 80005f8:	408b      	lsls	r3, r1
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4619      	mov	r1, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	400a      	ands	r2, r1
 8000604:	605a      	str	r2, [r3, #4]
		pGPIO_Handle->pGPIOx->OTYPER |= (temp << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6859      	ldr	r1, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	fa03 f202 	lsl.w	r2, r3, r2
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]


		//Configuring PUPD
		temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	7a1b      	ldrb	r3, [r3, #8]
 8000624:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->PUPDR &= ~(3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	2103      	movs	r1, #3
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	60da      	str	r2, [r3, #12]
		pGPIO_Handle->pGPIOx->PUPDR |= (temp << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68d9      	ldr	r1, [r3, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	409a      	lsls	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	60da      	str	r2, [r3, #12]

		if(mode == GPIO_MODE_ALTFN)
 800065c:	7cfb      	ldrb	r3, [r7, #19]
 800065e:	2b02      	cmp	r3, #2
 8000660:	f040 80eb 	bne.w	800083a <gpio_init+0x2ee>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	73fb      	strb	r3, [r7, #15]
			temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	f003 0307 	and.w	r3, r3, #7
 8000674:	73bb      	strb	r3, [r7, #14]
			pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	3208      	adds	r2, #8
 800067e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	220f      	movs	r2, #15
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	4001      	ands	r1, r0
 8000698:	3208      	adds	r2, #8
 800069a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	3208      	adds	r2, #8
 80006a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a5b      	ldrb	r3, [r3, #9]
 80006ae:	461a      	mov	r2, r3
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	4301      	orrs	r1, r0
 80006c2:	3208      	adds	r2, #8
 80006c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//3. Enable the IRQ by unmasking it in EXTI reg
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
	}

}
 80006c8:	e0b7      	b.n	800083a <gpio_init+0x2ee>
		SYSCFG_PCLK_EN();
 80006ca:	4b5e      	ldr	r3, [pc, #376]	@ (8000844 <gpio_init+0x2f8>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	4a5d      	ldr	r2, [pc, #372]	@ (8000844 <gpio_init+0x2f8>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	@ 0x44
		if(mode == GPIO_MODE_IT_RT)
 80006d6:	7cfb      	ldrb	r3, [r7, #19]
 80006d8:	2b05      	cmp	r3, #5
 80006da:	d117      	bne.n	800070c <gpio_init+0x1c0>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006dc:	4b5a      	ldr	r3, [pc, #360]	@ (8000848 <gpio_init+0x2fc>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a56      	ldr	r2, [pc, #344]	@ (8000848 <gpio_init+0x2fc>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006f2:	4b55      	ldr	r3, [pc, #340]	@ (8000848 <gpio_init+0x2fc>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	7912      	ldrb	r2, [r2, #4]
 80006fa:	4611      	mov	r1, r2
 80006fc:	2201      	movs	r2, #1
 80006fe:	408a      	lsls	r2, r1
 8000700:	43d2      	mvns	r2, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a50      	ldr	r2, [pc, #320]	@ (8000848 <gpio_init+0x2fc>)
 8000706:	400b      	ands	r3, r1
 8000708:	60d3      	str	r3, [r2, #12]
 800070a:	e033      	b.n	8000774 <gpio_init+0x228>
		else if(mode == GPIO_MODE_IT_FT)
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d117      	bne.n	8000742 <gpio_init+0x1f6>
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000712:	4b4d      	ldr	r3, [pc, #308]	@ (8000848 <gpio_init+0x2fc>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7912      	ldrb	r2, [r2, #4]
 800071a:	4611      	mov	r1, r2
 800071c:	2201      	movs	r2, #1
 800071e:	408a      	lsls	r2, r1
 8000720:	4611      	mov	r1, r2
 8000722:	4a49      	ldr	r2, [pc, #292]	@ (8000848 <gpio_init+0x2fc>)
 8000724:	430b      	orrs	r3, r1
 8000726:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000728:	4b47      	ldr	r3, [pc, #284]	@ (8000848 <gpio_init+0x2fc>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	7912      	ldrb	r2, [r2, #4]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	43d2      	mvns	r2, r2
 8000738:	4611      	mov	r1, r2
 800073a:	4a43      	ldr	r2, [pc, #268]	@ (8000848 <gpio_init+0x2fc>)
 800073c:	400b      	ands	r3, r1
 800073e:	6093      	str	r3, [r2, #8]
 8000740:	e018      	b.n	8000774 <gpio_init+0x228>
		else if(mode == GPIO_MODE_IT_RFT)
 8000742:	7cfb      	ldrb	r3, [r7, #19]
 8000744:	2b06      	cmp	r3, #6
 8000746:	d115      	bne.n	8000774 <gpio_init+0x228>
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	4b3f      	ldr	r3, [pc, #252]	@ (8000848 <gpio_init+0x2fc>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a3b      	ldr	r2, [pc, #236]	@ (8000848 <gpio_init+0x2fc>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	4b3a      	ldr	r3, [pc, #232]	@ (8000848 <gpio_init+0x2fc>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a36      	ldr	r2, [pc, #216]	@ (8000848 <gpio_init+0x2fc>)
 8000770:	430b      	orrs	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
		ofst = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4) ;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	74bb      	strb	r3, [r7, #18]
		temp1 = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4) ;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	747b      	strb	r3, [r7, #17]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a30      	ldr	r2, [pc, #192]	@ (800084c <gpio_init+0x300>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d024      	beq.n	80007da <gpio_init+0x28e>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a2e      	ldr	r2, [pc, #184]	@ (8000850 <gpio_init+0x304>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d01d      	beq.n	80007d6 <gpio_init+0x28a>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <gpio_init+0x308>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d016      	beq.n	80007d2 <gpio_init+0x286>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000858 <gpio_init+0x30c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d00f      	beq.n	80007ce <gpio_init+0x282>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <gpio_init+0x310>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d008      	beq.n	80007ca <gpio_init+0x27e>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a28      	ldr	r2, [pc, #160]	@ (8000860 <gpio_init+0x314>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <gpio_init+0x27a>
 80007c2:	2305      	movs	r3, #5
 80007c4:	e00a      	b.n	80007dc <gpio_init+0x290>
 80007c6:	23ff      	movs	r3, #255	@ 0xff
 80007c8:	e008      	b.n	80007dc <gpio_init+0x290>
 80007ca:	2304      	movs	r3, #4
 80007cc:	e006      	b.n	80007dc <gpio_init+0x290>
 80007ce:	2303      	movs	r3, #3
 80007d0:	e004      	b.n	80007dc <gpio_init+0x290>
 80007d2:	2302      	movs	r3, #2
 80007d4:	e002      	b.n	80007dc <gpio_init+0x290>
 80007d6:	2301      	movs	r3, #1
 80007d8:	e000      	b.n	80007dc <gpio_init+0x290>
 80007da:	2300      	movs	r3, #0
 80007dc:	743b      	strb	r3, [r7, #16]
		SYSCFG->EXTICR[ofst] &= ~(0xF << (4*temp1));
 80007de:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <gpio_init+0x318>)
 80007e0:	7cbb      	ldrb	r3, [r7, #18]
 80007e2:	3302      	adds	r3, #2
 80007e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e8:	7c7b      	ldrb	r3, [r7, #17]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	210f      	movs	r1, #15
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	491b      	ldr	r1, [pc, #108]	@ (8000864 <gpio_init+0x318>)
 80007f8:	7cbb      	ldrb	r3, [r7, #18]
 80007fa:	4002      	ands	r2, r0
 80007fc:	3302      	adds	r3, #2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[ofst] |= (portcode << (4*temp1));
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <gpio_init+0x318>)
 8000804:	7cbb      	ldrb	r3, [r7, #18]
 8000806:	3302      	adds	r3, #2
 8000808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080c:	7c39      	ldrb	r1, [r7, #16]
 800080e:	7c7b      	ldrb	r3, [r7, #17]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	4618      	mov	r0, r3
 8000818:	4912      	ldr	r1, [pc, #72]	@ (8000864 <gpio_init+0x318>)
 800081a:	7cbb      	ldrb	r3, [r7, #18]
 800081c:	4302      	orrs	r2, r0
 800081e:	3302      	adds	r3, #2
 8000820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <gpio_init+0x2fc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	7912      	ldrb	r2, [r2, #4]
 800082c:	4611      	mov	r1, r2
 800082e:	2201      	movs	r2, #1
 8000830:	408a      	lsls	r2, r1
 8000832:	4611      	mov	r1, r2
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <gpio_init+0x2fc>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40013c00 	.word	0x40013c00
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400
 8000854:	40020800 	.word	0x40020800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40021000 	.word	0x40021000
 8000860:	40021400 	.word	0x40021400
 8000864:	40013800 	.word	0x40013800

08000868 <gpio_read_inp_pin>:

	return port_val;
}

uint8_t gpio_read_inp_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	uint16_t pin_val = ((pGPIOx->IDR & 0xFFFF) >> PinNum) & 0x01;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	b29a      	uxth	r2, r3
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	fa22 f303 	lsr.w	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	81fb      	strh	r3, [r7, #14]

	return pin_val;
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	b2db      	uxtb	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <I2C_PeripheralControl>:

static void I2C_CloseSendData(I2C_Handle_t *pI2C_Handle);
static void I2C_CloseReceiveData(I2C_Handle_t *pI2C_Handle);

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d106      	bne.n	80008b8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f043 0201 	orr.w	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 80008b6:	e005      	b.n	80008c4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f023 0201 	bic.w	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <i2c_init>:

void i2c_init(I2C_Handle_t *pI2C_Handle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClk_Control(pI2C_Handle->pI2Cx,ENABLE);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	2101      	movs	r1, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f912 	bl	8000b0c <I2C_PeriClk_Control>

	if(pI2C_Handle->i2c_config.I2C_Ack == ENABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d106      	bne.n	80008fe <i2c_init+0x2e>
	{
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	2101      	movs	r1, #1
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f95c 	bl	8000bb4 <I2C_ManageAcking>
 80008fc:	e005      	b.n	800090a <i2c_init+0x3a>
	}
	else
	{
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f955 	bl	8000bb4 <I2C_ManageAcking>
	}

	//configure the FREQ field of CR2
	tempreg = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 800090e:	f000 f9ed 	bl	8000cec <RCC_GetPCLK1Value>
 8000912:	4603      	mov	r3, r0
 8000914:	4a46      	ldr	r2, [pc, #280]	@ (8000a30 <i2c_init+0x160>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800092c:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2C_Handle->i2c_config.DeviceAddress << 1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 = tempreg;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->i2c_config.I2C_SCLK_Speed <= I2C_SPEED_SM_100K)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a36      	ldr	r2, [pc, #216]	@ (8000a34 <i2c_init+0x164>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d80f      	bhi.n	8000980 <i2c_init+0xb0>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2C_Handle->i2c_config.I2C_SCLK_Speed ) );
 8000960:	f000 f9c4 	bl	8000cec <RCC_GetPCLK1Value>
 8000964:	4602      	mov	r2, r0
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000972:	897b      	ldrh	r3, [r7, #10]
 8000974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e02c      	b.n	80009da <i2c_init+0x10a>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->i2c_config.I2C_FMDutyCycle << 14);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	039b      	lsls	r3, r3, #14
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->i2c_config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10b      	bne.n	80009b4 <i2c_init+0xe4>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2C_Handle->i2c_config.I2C_SCLK_Speed ) );
 800099c:	f000 f9a6 	bl	8000cec <RCC_GetPCLK1Value>
 80009a0:	4601      	mov	r1, r0
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b0:	817b      	strh	r3, [r7, #10]
 80009b2:	e00c      	b.n	80009ce <i2c_init+0xfe>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2C_Handle->i2c_config.I2C_SCLK_Speed ) );
 80009b4:	f000 f99a 	bl	8000cec <RCC_GetPCLK1Value>
 80009b8:	4601      	mov	r1, r0
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009a      	lsls	r2, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80009cc:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80009ce:	897b      	ldrh	r3, [r7, #10]
 80009d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
	}
	pI2C_Handle->pI2Cx->CCR = tempreg;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2C_Handle->i2c_config.I2C_SCLK_Speed <= I2C_SPEED_SM_100K)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <i2c_init+0x164>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d809      	bhi.n	8000a00 <i2c_init+0x130>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80009ec:	f000 f97e 	bl	8000cec <RCC_GetPCLK1Value>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <i2c_init+0x160>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e00d      	b.n	8000a1c <i2c_init+0x14c>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000a00:	f000 f974 	bl	8000cec <RCC_GetPCLK1Value>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	0a5b      	lsrs	r3, r3, #9
 8000a10:	4a09      	ldr	r2, [pc, #36]	@ (8000a38 <i2c_init+0x168>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	09db      	lsrs	r3, r3, #7
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]

	}

	pI2C_Handle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a26:	621a      	str	r2, [r3, #32]

}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	000186a0 	.word	0x000186a0
 8000a38:	00044b83 	.word	0x00044b83

08000a3c <I2C_MasterSendData>:
 * @return            - none
 *
 * @Note              -
 */
void I2C_MasterSendData(I2C_Handle_t *pI2C_Handle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	71bb      	strb	r3, [r7, #6]
	//1. Generate start condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f8c8 	bl	8000bec <I2C_GenerateStartCondition>

	//2. Wait for SB Flag to be set
	while( !(Get_I2C_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB)) );
 8000a5c:	bf00      	nop
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f8ff 	bl	8000c68 <Get_I2C_FlagStatus>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f6      	beq.n	8000a5e <I2C_MasterSendData+0x22>

	//3. Write the slave addrs to DR (R/W' bit = 0 for write operation)
	I2C_ExecuteAddressPhase(pI2C_Handle->pI2Cx, SlaveAddr, I2C_WRITE_MODE);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	79b9      	ldrb	r1, [r7, #6]
 8000a76:	2200      	movs	r2, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f8d7 	bl	8000c2c <I2C_ExecuteAddressPhase>
//	I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, SlaveAddr);

	//4. Wait for ADDR Flag to be set
	while( !(Get_I2C_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR)) );
 8000a7e:	bf00      	nop
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2102      	movs	r1, #2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f8ee 	bl	8000c68 <Get_I2C_FlagStatus>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f6      	beq.n	8000a80 <I2C_MasterSendData+0x44>

	//5. Clear the ADDR Flag by reading SR1 and SR2 registers
	I2C_ClearADDRFlag(pI2C_Handle);
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f8fd 	bl	8000c92 <I2C_ClearADDRFlag>

	//6. Transmit data until len becomes zero
	while(Len > 0)
 8000a98:	e014      	b.n	8000ac4 <I2C_MasterSendData+0x88>
	{
		while( !(Get_I2C_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)) );
 8000a9a:	bf00      	nop
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8e0 	bl	8000c68 <Get_I2C_FlagStatus>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f6      	beq.n	8000a9c <I2C_MasterSendData+0x60>
		pI2C_Handle->pI2Cx->DR = (*pTxBuffer & 0xFF);
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
		Len--;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
	while(Len > 0)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e7      	bne.n	8000a9a <I2C_MasterSendData+0x5e>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while( !(Get_I2C_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)) );
 8000aca:	bf00      	nop
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f8c8 	bl	8000c68 <Get_I2C_FlagStatus>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f6      	beq.n	8000acc <I2C_MasterSendData+0x90>
	while( !(Get_I2C_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_BTF)) );
 8000ade:	bf00      	nop
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8be 	bl	8000c68 <Get_I2C_FlagStatus>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f6      	beq.n	8000ae0 <I2C_MasterSendData+0xa4>

	//8. Generate stop condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == DISABLE)
 8000af2:	7e3b      	ldrb	r3, [r7, #24]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f885 	bl	8000c0c <I2C_GenerateStopCondition>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <I2C_PeriClk_Control>:
	if(pI2C_Handle->Sr == ENABLE)
		I2C_ManageAcking(pI2C_Handle->pI2Cx, ENABLE);
}

void I2C_PeriClk_Control(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d11e      	bne.n	8000b5c <I2C_PeriClk_Control+0x50>
	{
		if(pI2Cx == I2C1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <I2C_PeriClk_Control+0x98>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d105      	bne.n	8000b32 <I2C_PeriClk_Control+0x26>
		{
			I2C1_PCLK_EN();
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		if(pI2Cx == I2C2)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <I2C_PeriClk_Control+0xa0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d105      	bne.n	8000b46 <I2C_PeriClk_Control+0x3a>
		{
			I2C2_PCLK_EN();
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		if(pI2Cx == I2C3)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <I2C_PeriClk_Control+0xa4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d124      	bne.n	8000b98 <I2C_PeriClk_Control+0x8c>
		{
			I2C3_PCLK_EN();
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
		if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000b5a:	e01d      	b.n	8000b98 <I2C_PeriClk_Control+0x8c>
		if(pI2Cx == I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <I2C_PeriClk_Control+0x98>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d105      	bne.n	8000b70 <I2C_PeriClk_Control+0x64>
			I2C1_PCLK_DI();
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	@ 0x40
		if(pI2Cx == I2C2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <I2C_PeriClk_Control+0xa0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d105      	bne.n	8000b84 <I2C_PeriClk_Control+0x78>
			I2C2_PCLK_DI();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b7e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
		if(pI2Cx == I2C3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <I2C_PeriClk_Control+0xa4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d105      	bne.n	8000b98 <I2C_PeriClk_Control+0x8c>
			I2C3_PCLK_DI();
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <I2C_PeriClk_Control+0x9c>)
 8000b92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40005800 	.word	0x40005800
 8000bb0:	40005c00 	.word	0x40005c00

08000bb4 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d106      	bne.n	8000bd4 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000bd2:	e005      	b.n	8000be0 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t rw)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	70bb      	strb	r3, [r7, #2]
	if(rw == I2C_WRITE_MODE)
 8000c3c:	78bb      	ldrb	r3, [r7, #2]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d105      	bne.n	8000c4e <I2C_ExecuteAddressPhase+0x22>
		pI2Cx->DR = ( (SlaveAddr << 1) & 0xFE );
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
	else
		pI2Cx->DR = ( (SlaveAddr << 1) | 0x01 );
}
 8000c4c:	e006      	b.n	8000c5c <I2C_ExecuteAddressPhase+0x30>
		pI2Cx->DR = ( (SlaveAddr << 1) | 0x01 );
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <Get_I2C_FlagStatus>:

static uint8_t Get_I2C_FlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FLAG)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	if( (pI2Cx->SR1) & FLAG )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <Get_I2C_FlagStatus+0x1c>
		return HIGH;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <Get_I2C_FlagStatus+0x1e>
	return LOW;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2C_Handle)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;

	//If in master mode and Busy in Rx
	if((pI2C_Handle->TxRxState == I2C_BSY_IN_RX) && (pI2C_Handle->pI2Cx->SR2 & (1 << I2C_SR2_MSL) ))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7e9b      	ldrb	r3, [r3, #26]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d110      	bne.n	8000cc4 <I2C_ClearADDRFlag+0x32>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d009      	beq.n	8000cc4 <I2C_ClearADDRFlag+0x32>
	{
		if(pI2C_Handle->RxSize == 1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7f5b      	ldrb	r3, [r3, #29]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d105      	bne.n	8000cc4 <I2C_ClearADDRFlag+0x32>
		{
			I2C_ManageAcking(pI2C_Handle->pI2Cx, DISABLE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff78 	bl	8000bb4 <I2C_ManageAcking>
		}
	}

	//Sequence to clear ADDR flag
	dummy_read = pI2C_Handle->pI2Cx->SR1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2C_Handle->pI2Cx->SR2;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <RCC_GetPll_Output>:

uint16_t AHB_Prescalar_Div_Val[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB_Prescalar_Div_Val[4] = {2, 4, 8, 16};

uint32_t RCC_GetPll_Output()
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <RCC_GetPCLK1Value>:
	PClk2 = (sysclk / ahbp) / apbp2;

	return PClk2;
}
uint32_t RCC_GetPCLK1Value()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
	uint8_t temp = (RCC->CFGR >> 2) & 0x03;		//System clk switch status
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <RCC_GetPCLK1Value+0x9c>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	71fb      	strb	r3, [r7, #7]
	uint16_t ahbp;
	uint8_t apbp1;

	uint32_t sysclk, PClk1;

	if(temp==0)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <RCC_GetPCLK1Value+0xa0>)
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	e00b      	b.n	8000d24 <RCC_GetPCLK1Value+0x38>
	else if(temp==1)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d102      	bne.n	8000d18 <RCC_GetPCLK1Value+0x2c>
		sysclk = 8000000;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <RCC_GetPCLK1Value+0xa4>)
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	e005      	b.n	8000d24 <RCC_GetPCLK1Value+0x38>
	else if(temp==2)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d102      	bne.n	8000d24 <RCC_GetPCLK1Value+0x38>
		sysclk = RCC_GetPll_Output();
 8000d1e:	f7ff ffdd 	bl	8000cdc <RCC_GetPll_Output>
 8000d22:	60b8      	str	r0, [r7, #8]

	temp = (RCC->CFGR >> 4) & 0x0F;			//HPRE bits (AHB prescalar bits)
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <RCC_GetPCLK1Value+0x9c>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	71fb      	strb	r3, [r7, #7]
	if(temp < 8)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b07      	cmp	r3, #7
 8000d36:	d802      	bhi.n	8000d3e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	81fb      	strh	r3, [r7, #14]
 8000d3c:	e005      	b.n	8000d4a <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_Prescalar_Div_Val[temp-8];
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	3b08      	subs	r3, #8
 8000d42:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <RCC_GetPCLK1Value+0xa8>)
 8000d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d48:	81fb      	strh	r3, [r7, #14]

	temp = (RCC->CFGR >> 10) & 0x07;			//PPRE1 bits (APB1 prescalar bits)
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <RCC_GetPCLK1Value+0x9c>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	0a9b      	lsrs	r3, r3, #10
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	71fb      	strb	r3, [r7, #7]
	if(temp < 4)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d802      	bhi.n	8000d64 <RCC_GetPCLK1Value+0x78>
		apbp1 = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	737b      	strb	r3, [r7, #13]
 8000d62:	e004      	b.n	8000d6e <RCC_GetPCLK1Value+0x82>
	else
		apbp1 = APB_Prescalar_Div_Val[temp-4];
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	3b04      	subs	r3, #4
 8000d68:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <RCC_GetPCLK1Value+0xac>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	737b      	strb	r3, [r7, #13]

	PClk1 = (sysclk / ahbp) / apbp1;
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d76:	7b7b      	ldrb	r3, [r7, #13]
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	603b      	str	r3, [r7, #0]

	return PClk1;
 8000d7e:	683b      	ldr	r3, [r7, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	00f42400 	.word	0x00f42400
 8000d90:	007a1200 	.word	0x007a1200
 8000d94:	2000001c 	.word	0x2000001c
 8000d98:	2000002c 	.word	0x2000002c

08000d9c <__libc_init_array>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000dd4 <__libc_init_array+0x38>)
 8000da0:	4c0d      	ldr	r4, [pc, #52]	@ (8000dd8 <__libc_init_array+0x3c>)
 8000da2:	1b64      	subs	r4, r4, r5
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	2600      	movs	r6, #0
 8000da8:	42a6      	cmp	r6, r4
 8000daa:	d109      	bne.n	8000dc0 <__libc_init_array+0x24>
 8000dac:	4d0b      	ldr	r5, [pc, #44]	@ (8000ddc <__libc_init_array+0x40>)
 8000dae:	4c0c      	ldr	r4, [pc, #48]	@ (8000de0 <__libc_init_array+0x44>)
 8000db0:	f000 f818 	bl	8000de4 <_init>
 8000db4:	1b64      	subs	r4, r4, r5
 8000db6:	10a4      	asrs	r4, r4, #2
 8000db8:	2600      	movs	r6, #0
 8000dba:	42a6      	cmp	r6, r4
 8000dbc:	d105      	bne.n	8000dca <__libc_init_array+0x2e>
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc4:	4798      	blx	r3
 8000dc6:	3601      	adds	r6, #1
 8000dc8:	e7ee      	b.n	8000da8 <__libc_init_array+0xc>
 8000dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dce:	4798      	blx	r3
 8000dd0:	3601      	adds	r6, #1
 8000dd2:	e7f2      	b.n	8000dba <__libc_init_array+0x1e>
 8000dd4:	08000e04 	.word	0x08000e04
 8000dd8:	08000e04 	.word	0x08000e04
 8000ddc:	08000e04 	.word	0x08000e04
 8000de0:	08000e08 	.word	0x08000e08

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
